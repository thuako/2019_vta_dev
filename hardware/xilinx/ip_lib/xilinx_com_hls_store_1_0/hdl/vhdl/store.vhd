-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity store is
generic (
    C_M_AXI_DATA_PORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_port_AWVALID : OUT STD_LOGIC;
    m_axi_data_port_AWREADY : IN STD_LOGIC;
    m_axi_data_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_data_port_WVALID : OUT STD_LOGIC;
    m_axi_data_port_WREADY : IN STD_LOGIC;
    m_axi_data_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_data_port_WLAST : OUT STD_LOGIC;
    m_axi_data_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_data_port_ARVALID : OUT STD_LOGIC;
    m_axi_data_port_ARREADY : IN STD_LOGIC;
    m_axi_data_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_data_port_RVALID : IN STD_LOGIC;
    m_axi_data_port_RREADY : OUT STD_LOGIC;
    m_axi_data_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_RLAST : IN STD_LOGIC;
    m_axi_data_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_data_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BVALID : IN STD_LOGIC;
    m_axi_data_port_BREADY : OUT STD_LOGIC;
    m_axi_data_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_BUSER_WIDTH-1 downto 0);
    store_queue_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    store_queue_V_V_TVALID : IN STD_LOGIC;
    store_queue_V_V_TREADY : OUT STD_LOGIC;
    g2s_dep_queue_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    g2s_dep_queue_V_TVALID : IN STD_LOGIC;
    g2s_dep_queue_V_TREADY : OUT STD_LOGIC;
    s2g_dep_queue_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    s2g_dep_queue_V_TVALID : OUT STD_LOGIC;
    s2g_dep_queue_V_TREADY : IN STD_LOGIC;
    out_mem_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_mem_V_EN_A : OUT STD_LOGIC;
    out_mem_V_WEN_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_mem_V_Din_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_mem_V_Dout_A : IN STD_LOGIC_VECTOR (127 downto 0);
    out_mem_V_Clk_A : OUT STD_LOGIC;
    out_mem_V_Rst_A : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of store is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "store,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1481,HLS_SYN_LUT=2465,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal outputs_V : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_port_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln543_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln543_reg_640_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal store_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal g2s_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_2_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s2g_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln538_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_6_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_AWVALID : STD_LOGIC;
    signal data_port_AWREADY : STD_LOGIC;
    signal data_port_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_WVALID : STD_LOGIC;
    signal data_port_WREADY : STD_LOGIC;
    signal data_port_ARREADY : STD_LOGIC;
    signal data_port_RVALID : STD_LOGIC;
    signal data_port_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data_port_RLAST : STD_LOGIC;
    signal data_port_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BVALID : STD_LOGIC;
    signal data_port_BREADY : STD_LOGIC;
    signal data_port_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln543_reg_253 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast4_fu_274_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_cast4_reg_564 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_reg_569 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_reg_587 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_326_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln304_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln304_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_340_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln_reg_602 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln543_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln543_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_615 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op57_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal add_ln542_fu_375_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln542_reg_620 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln_fu_401_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_635 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln543_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln543_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln543_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln543_fu_414_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_9_fu_444_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mem_V_load_reg_659 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_8_fu_448_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_reg_665 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_10_fu_455_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_10_reg_670 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln543_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln543_1_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln543_2_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln543_2_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln543_fu_530_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln543_reg_687 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln543_2_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln543_2_reg_692 : STD_LOGIC_VECTOR (63 downto 0);
    signal sram_idx_V_1_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sram_idx_V_1_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln304_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln304_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal sram_idx_V_0_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal dram_idx_V_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_reg_242 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln543_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal out_mem_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_264_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_fu_278_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_363_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1352_fu_371_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln543_fu_397_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln543_1_fu_420_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln543_1_fu_424_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln543_1_fu_429_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln543_2_fu_467_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln543_3_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln543_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln543_1_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_473_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln543_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln543_fu_500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln543_2_fu_513_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln543_1_fu_507_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln543_4_fu_526_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln543_5_fu_536_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln543_2_fu_539_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln543_fu_545_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal regslice_both_s2g_dep_queue_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_store_queue_V_V_U_apdone_blk : STD_LOGIC;
    signal store_queue_V_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal store_queue_V_V_TVALID_int : STD_LOGIC;
    signal store_queue_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_store_queue_V_V_U_ack_in : STD_LOGIC;
    signal regslice_both_g2s_dep_queue_V_U_apdone_blk : STD_LOGIC;
    signal g2s_dep_queue_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal g2s_dep_queue_V_TVALID_int : STD_LOGIC;
    signal g2s_dep_queue_V_TREADY_int : STD_LOGIC;
    signal regslice_both_g2s_dep_queue_V_U_ack_in : STD_LOGIC;
    signal s2g_dep_queue_V_TVALID_int : STD_LOGIC;
    signal s2g_dep_queue_V_TREADY_int : STD_LOGIC;
    signal regslice_both_s2g_dep_queue_V_U_vld_out : STD_LOGIC;

    component store_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        outputs_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_data_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    store_CONTROL_BUS_s_axi_U : component store_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        outputs_V => outputs_V);

    store_data_port_m_axi_U : component store_data_port_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_PORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_port_AWVALID,
        AWREADY => m_axi_data_port_AWREADY,
        AWADDR => m_axi_data_port_AWADDR,
        AWID => m_axi_data_port_AWID,
        AWLEN => m_axi_data_port_AWLEN,
        AWSIZE => m_axi_data_port_AWSIZE,
        AWBURST => m_axi_data_port_AWBURST,
        AWLOCK => m_axi_data_port_AWLOCK,
        AWCACHE => m_axi_data_port_AWCACHE,
        AWPROT => m_axi_data_port_AWPROT,
        AWQOS => m_axi_data_port_AWQOS,
        AWREGION => m_axi_data_port_AWREGION,
        AWUSER => m_axi_data_port_AWUSER,
        WVALID => m_axi_data_port_WVALID,
        WREADY => m_axi_data_port_WREADY,
        WDATA => m_axi_data_port_WDATA,
        WSTRB => m_axi_data_port_WSTRB,
        WLAST => m_axi_data_port_WLAST,
        WID => m_axi_data_port_WID,
        WUSER => m_axi_data_port_WUSER,
        ARVALID => m_axi_data_port_ARVALID,
        ARREADY => m_axi_data_port_ARREADY,
        ARADDR => m_axi_data_port_ARADDR,
        ARID => m_axi_data_port_ARID,
        ARLEN => m_axi_data_port_ARLEN,
        ARSIZE => m_axi_data_port_ARSIZE,
        ARBURST => m_axi_data_port_ARBURST,
        ARLOCK => m_axi_data_port_ARLOCK,
        ARCACHE => m_axi_data_port_ARCACHE,
        ARPROT => m_axi_data_port_ARPROT,
        ARQOS => m_axi_data_port_ARQOS,
        ARREGION => m_axi_data_port_ARREGION,
        ARUSER => m_axi_data_port_ARUSER,
        RVALID => m_axi_data_port_RVALID,
        RREADY => m_axi_data_port_RREADY,
        RDATA => m_axi_data_port_RDATA,
        RLAST => m_axi_data_port_RLAST,
        RID => m_axi_data_port_RID,
        RUSER => m_axi_data_port_RUSER,
        RRESP => m_axi_data_port_RRESP,
        BVALID => m_axi_data_port_BVALID,
        BREADY => m_axi_data_port_BREADY,
        BRESP => m_axi_data_port_BRESP,
        BID => m_axi_data_port_BID,
        BUSER => m_axi_data_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data_port_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_port_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data_port_RDATA,
        I_RID => data_port_RID,
        I_RUSER => data_port_RUSER,
        I_RRESP => data_port_RRESP,
        I_RLAST => data_port_RLAST,
        I_AWVALID => data_port_AWVALID,
        I_AWREADY => data_port_AWREADY,
        I_AWADDR => data_port_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => zext_ln543_reg_607,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => data_port_WVALID,
        I_WREADY => data_port_WREADY,
        I_WDATA => trunc_ln543_2_reg_692,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => data_port_BVALID,
        I_BREADY => data_port_BREADY,
        I_BRESP => data_port_BRESP,
        I_BID => data_port_BID,
        I_BUSER => data_port_BUSER);

    regslice_both_store_queue_V_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => store_queue_V_V_TDATA,
        vld_in => store_queue_V_V_TVALID,
        ack_in => regslice_both_store_queue_V_V_U_ack_in,
        data_out => store_queue_V_V_TDATA_int,
        vld_out => store_queue_V_V_TVALID_int,
        ack_out => store_queue_V_V_TREADY_int,
        apdone_blk => regslice_both_store_queue_V_V_U_apdone_blk);

    regslice_both_g2s_dep_queue_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => g2s_dep_queue_V_TDATA,
        vld_in => g2s_dep_queue_V_TVALID,
        ack_in => regslice_both_g2s_dep_queue_V_U_ack_in,
        data_out => g2s_dep_queue_V_TDATA_int,
        vld_out => g2s_dep_queue_V_TVALID_int,
        ack_out => g2s_dep_queue_V_TREADY_int,
        apdone_blk => regslice_both_g2s_dep_queue_V_U_apdone_blk);

    regslice_both_s2g_dep_queue_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_1,
        vld_in => s2g_dep_queue_V_TVALID_int,
        ack_in => s2g_dep_queue_V_TREADY_int,
        data_out => s2g_dep_queue_V_TDATA,
        vld_out => regslice_both_s2g_dep_queue_V_U_vld_out,
        ack_out => s2g_dep_queue_V_TREADY,
        apdone_blk => regslice_both_s2g_dep_queue_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dram_idx_V_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                dram_idx_V_reg_232 <= add_ln304_reg_702;
            elsif ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dram_idx_V_reg_232 <= store_queue_V_V_TDATA_int(56 downto 25);
            end if; 
        end if;
    end process;

    phi_ln543_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln543_fu_409_p2 = ap_const_lv1_0))) then 
                phi_ln543_reg_253 <= add_ln543_fu_414_p2;
            elsif (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln543_reg_253 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    sram_idx_V_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                sram_idx_V_0_reg_222 <= sram_idx_V_1_reg_697;
            elsif ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sram_idx_V_0_reg_222 <= store_queue_V_V_TDATA_int(24 downto 9);
            end if; 
        end if;
    end process;

    y_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                y_0_reg_242 <= y_reg_615;
            elsif ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_242 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln304_reg_702 <= add_ln304_fu_559_p2;
                sram_idx_V_1_reg_697 <= sram_idx_V_1_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln538_fu_352_p2 = ap_const_lv1_0))) then
                add_ln542_reg_620 <= add_ln542_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    and_ln_reg_602(16 downto 1) <= and_ln_fu_340_p3(16 downto 1);
                    p_cast4_reg_564(28 downto 0) <= p_cast4_fu_274_p1(28 downto 0);
                tmp_V_reg_569 <= store_queue_V_V_TDATA_int;
                tmp_reg_587 <= store_queue_V_V_TDATA_int(79 downto 64);
                trunc_ln2_reg_592 <= store_queue_V_V_TDATA_int(95 downto 80);
                    zext_ln304_reg_597(15 downto 0) <= zext_ln304_fu_336_p1(15 downto 0);
                    zext_ln543_reg_607(16 downto 1) <= zext_ln543_fu_348_p1(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln543_reg_640 = ap_const_lv1_0))) then
                    empty_10_reg_670(6) <= empty_10_fu_455_p2(6);
                icmp_ln543_1_reg_675 <= icmp_ln543_1_fu_461_p2;
                out_mem_V_load_reg_659 <= out_mem_V_Dout_A;
                    tmp_8_reg_665(6) <= tmp_8_fu_448_p3(6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln543_fu_409_p2 = ap_const_lv1_0))) then
                empty_9_reg_654 <= empty_9_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln543_reg_640 <= icmp_ln543_fu_409_p2;
                icmp_ln543_reg_640_pp0_iter1_reg <= icmp_ln543_reg_640;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln543_reg_640_pp0_iter2_reg <= icmp_ln543_reg_640_pp0_iter1_reg;
                icmp_ln543_reg_640_pp0_iter3_reg <= icmp_ln543_reg_640_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln543_reg_640_pp0_iter1_reg = ap_const_lv1_0))) then
                lshr_ln543_reg_687 <= lshr_ln543_fu_530_p2;
                    sub_ln543_2_reg_682(7 downto 1) <= sub_ln543_2_fu_520_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_635(13 downto 1) <= shl_ln_fu_401_p3(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln538_fu_352_p2 = ap_const_lv1_1))) then
                tmp_6_reg_625 <= tmp_V_reg_569(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln543_reg_640_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln543_2_reg_692 <= trunc_ln543_2_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                y_reg_615 <= y_fu_357_p2;
            end if;
        end if;
    end process;
    p_cast4_reg_564(33 downto 29) <= "00000";
    zext_ln304_reg_597(31 downto 16) <= "0000000000000000";
    and_ln_reg_602(0) <= '0';
    zext_ln543_reg_607(0) <= '0';
    zext_ln543_reg_607(31 downto 17) <= "000000000000000";
    shl_ln_reg_635(0) <= '0';
    tmp_8_reg_665(5 downto 0) <= "000000";
    empty_10_reg_670(5 downto 0) <= "111111";
    sub_ln543_2_reg_682(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp0_iter4, ap_CS_fsm_state13, tmp_2_fu_288_p3, ap_CS_fsm_state2, icmp_ln538_fu_352_p2, ap_CS_fsm_state14, data_port_AWREADY, data_port_BVALID, ap_block_state2_io, icmp_ln543_fu_409_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, regslice_both_s2g_dep_queue_V_U_apdone_blk, ap_block_state14_io, store_queue_V_V_TVALID_int, g2s_dep_queue_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln538_fu_352_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln538_fu_352_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln543_fu_409_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln543_fu_409_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((data_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((ap_const_boolean_1 = ap_block_state14_io) or (regslice_both_s2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln304_fu_559_p2 <= std_logic_vector(unsigned(dram_idx_V_reg_232) + unsigned(zext_ln304_reg_597));
    add_ln542_fu_375_p2 <= std_logic_vector(unsigned(p_cast4_reg_564) + unsigned(zext_ln1352_fu_371_p1));
    add_ln543_1_fu_424_p2 <= std_logic_vector(unsigned(shl_ln_reg_635) + unsigned(trunc_ln543_1_fu_420_p1));
    add_ln543_fu_414_p2 <= std_logic_vector(unsigned(phi_ln543_reg_253) + unsigned(ap_const_lv17_1));
    and_ln543_fu_545_p2 <= (lshr_ln543_reg_687 and lshr_ln543_2_fu_539_p2);
    and_ln_fu_340_p3 <= (trunc_ln2_fu_326_p4 & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, tmp_2_fu_288_p3, store_queue_V_V_TVALID_int, g2s_dep_queue_V_TVALID_int)
    begin
                ap_block_state1 <= ((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)));
    end process;


    ap_block_state14_io_assign_proc : process(tmp_6_reg_625, s2g_dep_queue_V_TREADY_int)
    begin
                ap_block_state14_io <= ((s2g_dep_queue_V_TREADY_int = ap_const_logic_0) and (tmp_6_reg_625 = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op57_write_state2, s2g_dep_queue_V_TREADY_int)
    begin
                ap_block_state2_io <= ((s2g_dep_queue_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op57_write_state2 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(icmp_ln543_reg_640_pp0_iter3_reg, data_port_WREADY)
    begin
                ap_block_state8_io <= ((data_port_WREADY = ap_const_logic_0) and (icmp_ln543_reg_640_pp0_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln543_fu_409_p2)
    begin
        if ((icmp_ln543_fu_409_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14, regslice_both_s2g_dep_queue_V_U_apdone_blk, ap_block_state14_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state14_io) or (regslice_both_s2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op57_write_state2_assign_proc : process(icmp_ln538_fu_352_p2, tmp_6_fu_380_p3)
    begin
                ap_predicate_op57_write_state2 <= ((tmp_6_fu_380_p3 = ap_const_lv1_1) and (icmp_ln538_fu_352_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, regslice_both_s2g_dep_queue_V_U_apdone_blk, ap_block_state14_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state14_io) or (regslice_both_s2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_port_AWADDR <= zext_ln542_fu_387_p1(32 - 1 downto 0);

    data_port_AWVALID_assign_proc : process(ap_CS_fsm_state3, data_port_AWREADY)
    begin
        if (((data_port_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_port_AWVALID <= ap_const_logic_1;
        else 
            data_port_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_port_BREADY_assign_proc : process(ap_CS_fsm_state13, data_port_BVALID)
    begin
        if (((data_port_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            data_port_BREADY <= ap_const_logic_1;
        else 
            data_port_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_port_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln543_reg_640_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln543_reg_640_pp0_iter3_reg = ap_const_lv1_0))) then 
            data_port_WVALID <= ap_const_logic_1;
        else 
            data_port_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_port_blk_n_AW_assign_proc : process(m_axi_data_port_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_port_blk_n_AW <= m_axi_data_port_AWREADY;
        else 
            data_port_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data_port_blk_n_B_assign_proc : process(m_axi_data_port_BVALID, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_port_blk_n_B <= m_axi_data_port_BVALID;
        else 
            data_port_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data_port_blk_n_W_assign_proc : process(m_axi_data_port_WREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, icmp_ln543_reg_640_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln543_reg_640_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_port_blk_n_W <= m_axi_data_port_WREADY;
        else 
            data_port_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_10_fu_455_p2 <= (tmp_8_fu_448_p3 or ap_const_lv7_3F);
    empty_9_fu_444_p1 <= phi_ln543_reg_253(1 - 1 downto 0);

    g2s_dep_queue_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_288_p3, g2s_dep_queue_V_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_2_fu_288_p3 = ap_const_lv1_1))) then 
            g2s_dep_queue_V_TDATA_blk_n <= g2s_dep_queue_V_TVALID_int;
        else 
            g2s_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g2s_dep_queue_V_TREADY_assign_proc : process(g2s_dep_queue_V_TVALID, regslice_both_g2s_dep_queue_V_U_ack_in)
    begin
        if (((g2s_dep_queue_V_TVALID = ap_const_logic_1) and (regslice_both_g2s_dep_queue_V_U_ack_in = ap_const_logic_1))) then 
            g2s_dep_queue_V_TREADY <= ap_const_logic_1;
        else 
            g2s_dep_queue_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    g2s_dep_queue_V_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_288_p3, store_queue_V_V_TVALID_int, g2s_dep_queue_V_TVALID_int)
    begin
        if ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_2_fu_288_p3 = ap_const_lv1_1))) then 
            g2s_dep_queue_V_TREADY_int <= ap_const_logic_1;
        else 
            g2s_dep_queue_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln538_fu_352_p2 <= "1" when (y_0_reg_242 = tmp_reg_587) else "0";
    icmp_ln543_1_fu_461_p2 <= "1" when (unsigned(tmp_8_fu_448_p3) > unsigned(empty_10_fu_455_p2)) else "0";
    icmp_ln543_fu_409_p2 <= "1" when (phi_ln543_reg_253 = and_ln_reg_602) else "0";
    lshr_ln543_1_fu_429_p4 <= add_ln543_1_fu_424_p2(13 downto 1);
    lshr_ln543_2_fu_539_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln543_5_fu_536_p1(31-1 downto 0)))));
    lshr_ln543_fu_530_p2 <= std_logic_vector(shift_right(unsigned(select_ln543_1_fu_507_p3),to_integer(unsigned('0' & zext_ln543_4_fu_526_p1(31-1 downto 0)))));
    out_mem_V_Addr_A <= std_logic_vector(shift_left(unsigned(out_mem_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    out_mem_V_Addr_A_orig <= zext_ln543_1_fu_439_p1(32 - 1 downto 0);
    out_mem_V_Clk_A <= ap_clk;
    out_mem_V_Din_A <= ap_const_lv128_lc_1;

    out_mem_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_mem_V_EN_A <= ap_const_logic_1;
        else 
            out_mem_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    out_mem_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                out_mem_V_Rst_A <= not(ap_rst_n);
    end process;

    out_mem_V_WEN_A <= ap_const_lv16_0;
    p_cast4_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_264_p4),34));
    ret_V_fu_363_p3 <= (dram_idx_V_reg_232 & ap_const_lv1_0);

    s2g_dep_queue_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln538_fu_352_p2, tmp_6_fu_380_p3, ap_CS_fsm_state14, tmp_6_reg_625, s2g_dep_queue_V_TREADY_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_6_reg_625 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_6_fu_380_p3 = ap_const_lv1_1) and (icmp_ln538_fu_352_p2 = ap_const_lv1_1)))) then 
            s2g_dep_queue_V_TDATA_blk_n <= s2g_dep_queue_V_TREADY_int;
        else 
            s2g_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s2g_dep_queue_V_TVALID <= regslice_both_s2g_dep_queue_V_U_vld_out;

    s2g_dep_queue_V_TVALID_int_assign_proc : process(ap_CS_fsm_state2, ap_predicate_op57_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_predicate_op57_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s2g_dep_queue_V_TVALID_int <= ap_const_logic_1;
        else 
            s2g_dep_queue_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln543_1_fu_507_p3 <= 
        tmp_7_fu_473_p4 when (icmp_ln543_1_reg_675(0) = '1') else 
        out_mem_V_load_reg_659;
    select_ln543_2_fu_513_p3 <= 
        xor_ln543_fu_488_p2 when (icmp_ln543_1_reg_675(0) = '1') else 
        zext_ln543_2_fu_467_p1;
    select_ln543_fu_500_p3 <= 
        sub_ln543_fu_482_p2 when (icmp_ln543_1_reg_675(0) = '1') else 
        sub_ln543_1_fu_494_p2;
    shl_ln_fu_401_p3 <= (trunc_ln543_fu_397_p1 & ap_const_lv1_0);
    sram_idx_V_1_fu_554_p2 <= std_logic_vector(unsigned(trunc_ln2_reg_592) + unsigned(sram_idx_V_0_reg_222));

    store_queue_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, store_queue_V_V_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            store_queue_V_V_TDATA_blk_n <= store_queue_V_V_TVALID_int;
        else 
            store_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    store_queue_V_V_TREADY_assign_proc : process(store_queue_V_V_TVALID, regslice_both_store_queue_V_V_U_ack_in)
    begin
        if (((store_queue_V_V_TVALID = ap_const_logic_1) and (regslice_both_store_queue_V_V_U_ack_in = ap_const_logic_1))) then 
            store_queue_V_V_TREADY <= ap_const_logic_1;
        else 
            store_queue_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    store_queue_V_V_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_288_p3, store_queue_V_V_TVALID_int, g2s_dep_queue_V_TVALID_int)
    begin
        if ((not(((store_queue_V_V_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((g2s_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_288_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            store_queue_V_V_TREADY_int <= ap_const_logic_1;
        else 
            store_queue_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln543_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln543_3_fu_470_p1) - unsigned(zext_ln543_2_fu_467_p1));
    sub_ln543_2_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln543_fu_500_p3));
    sub_ln543_fu_482_p2 <= std_logic_vector(unsigned(zext_ln543_2_fu_467_p1) - unsigned(zext_ln543_3_fu_470_p1));
    tmp_1_fu_264_p4 <= outputs_V(31 downto 3);
    tmp_2_fu_288_p3 <= store_queue_V_V_TDATA_int(3 downto 3);
    tmp_3_fu_278_p4 <= store_queue_V_V_TDATA_int(111 downto 96);
    tmp_6_fu_380_p3 <= tmp_V_reg_569(5 downto 5);
    
    tmp_7_fu_473_p4_proc : process(out_mem_V_load_reg_659)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_7_fu_473_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := out_mem_V_load_reg_659;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_7_fu_473_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_7_fu_473_p4_i) := out_mem_V_load_reg_659(128-1-tmp_7_fu_473_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_473_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_8_fu_448_p3 <= (empty_9_reg_654 & ap_const_lv6_0);
    trunc_ln2_fu_326_p4 <= store_queue_V_V_TDATA_int(95 downto 80);
    trunc_ln543_1_fu_420_p1 <= phi_ln543_reg_253(14 - 1 downto 0);
    trunc_ln543_2_fu_550_p1 <= and_ln543_fu_545_p2(64 - 1 downto 0);
    trunc_ln543_fu_397_p1 <= sram_idx_V_0_reg_222(13 - 1 downto 0);
    xor_ln543_fu_488_p2 <= (zext_ln543_2_fu_467_p1 xor ap_const_lv8_7F);
    y_fu_357_p2 <= std_logic_vector(unsigned(y_0_reg_242) + unsigned(ap_const_lv16_1));
    zext_ln1352_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_363_p3),34));
    zext_ln304_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_278_p4),32));
    zext_ln542_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_reg_620),64));
    zext_ln543_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln543_1_fu_429_p4),64));
    zext_ln543_2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_665),8));
    zext_ln543_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_reg_670),8));
    zext_ln543_4_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln543_2_fu_513_p3),128));
    zext_ln543_5_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln543_2_reg_682),128));
    zext_ln543_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_340_p3),32));
end behav;
