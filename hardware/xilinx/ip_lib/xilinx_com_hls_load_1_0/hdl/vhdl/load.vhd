-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load is
generic (
    C_M_AXI_DATA_PORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_port_AWVALID : OUT STD_LOGIC;
    m_axi_data_port_AWREADY : IN STD_LOGIC;
    m_axi_data_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_data_port_WVALID : OUT STD_LOGIC;
    m_axi_data_port_WREADY : IN STD_LOGIC;
    m_axi_data_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_data_port_WLAST : OUT STD_LOGIC;
    m_axi_data_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_data_port_ARVALID : OUT STD_LOGIC;
    m_axi_data_port_ARREADY : IN STD_LOGIC;
    m_axi_data_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_data_port_RVALID : IN STD_LOGIC;
    m_axi_data_port_RREADY : OUT STD_LOGIC;
    m_axi_data_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_RLAST : IN STD_LOGIC;
    m_axi_data_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_data_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BVALID : IN STD_LOGIC;
    m_axi_data_port_BREADY : OUT STD_LOGIC;
    m_axi_data_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_BUSER_WIDTH-1 downto 0);
    load_queue_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    load_queue_V_V_TVALID : IN STD_LOGIC;
    load_queue_V_V_TREADY : OUT STD_LOGIC;
    g2l_dep_queue_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    g2l_dep_queue_V_TVALID : IN STD_LOGIC;
    g2l_dep_queue_V_TREADY : OUT STD_LOGIC;
    l2g_dep_queue_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    l2g_dep_queue_V_TVALID : OUT STD_LOGIC;
    l2g_dep_queue_V_TREADY : IN STD_LOGIC;
    inp_mem_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inp_mem_V_EN_A : OUT STD_LOGIC;
    inp_mem_V_WEN_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    inp_mem_V_Din_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    inp_mem_V_Dout_A : IN STD_LOGIC_VECTOR (127 downto 0);
    inp_mem_V_Clk_A : OUT STD_LOGIC;
    inp_mem_V_Rst_A : OUT STD_LOGIC;
    wgt_mem_0_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    wgt_mem_0_V_EN_A : OUT STD_LOGIC;
    wgt_mem_0_V_WEN_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    wgt_mem_0_V_Din_A : OUT STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_0_V_Dout_A : IN STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_0_V_Clk_A : OUT STD_LOGIC;
    wgt_mem_0_V_Rst_A : OUT STD_LOGIC;
    wgt_mem_1_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    wgt_mem_1_V_EN_A : OUT STD_LOGIC;
    wgt_mem_1_V_WEN_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    wgt_mem_1_V_Din_A : OUT STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_1_V_Dout_A : IN STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_1_V_Clk_A : OUT STD_LOGIC;
    wgt_mem_1_V_Rst_A : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of load is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.275000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=4241,HLS_SYN_LUT=18146,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv128_lc_5 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111100";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3F : STD_LOGIC_VECTOR (9 downto 0) := "0000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv1024_lc_6 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputs_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_V : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal data_port_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln67_reg_1415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln89_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal load_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal g2l_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_2_fu_508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal l2g_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_7_fu_1155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_7_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_AWREADY : STD_LOGIC;
    signal data_port_WREADY : STD_LOGIC;
    signal data_port_ARVALID : STD_LOGIC;
    signal data_port_ARREADY : STD_LOGIC;
    signal data_port_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_RVALID : STD_LOGIC;
    signal data_port_RREADY : STD_LOGIC;
    signal data_port_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data_port_RLAST : STD_LOGIC;
    signal data_port_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BVALID : STD_LOGIC;
    signal data_port_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln89_reg_365 : STD_LOGIC_VECTOR (20 downto 0);
    signal phi_ln67_reg_407 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln206_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_ready : STD_LOGIC;
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done : STD_LOGIC;
    signal reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast8_fu_490_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_cast8_reg_1162 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_cast7_fu_504_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_cast7_reg_1167 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_V_reg_1172 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln200_fu_516_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln200_fu_522_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln200_reg_1191 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln200_1_fu_530_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln200_1_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln200_2_fu_546_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln200_2_reg_1204 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_width_V_fu_564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_width_V_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln200_1_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln200_1_reg_1215 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_0_V_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_0_V_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_fu_604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln206_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_1_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln700_1_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_634_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1_reg_1243 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln89_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_reg_1248 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln88_fu_669_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln88_reg_1261 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln86_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln89_1_fu_688_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln89_1_reg_1272 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln89_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln89_fu_701_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln89_reg_1281 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln89_2_fu_711_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln89_2_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln89_2_reg_1286_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1_reg_1291 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_reg_1296 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_port_addr_1_read_reg_1301 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state12_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal shl_ln89_2_fu_740_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln89_2_reg_1306 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_20_fu_747_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_20_reg_1311 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln89_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_1_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal wgt_mem_0_V_addr_reg_1324 : STD_LOGIC_VECTOR (9 downto 0);
    signal wgt_mem_1_V_addr_reg_1329 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln89_fu_818_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln89_reg_1334 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln89_fu_836_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln89_reg_1340 : STD_LOGIC_VECTOR (1023 downto 0);
    signal add_ln700_2_fu_888_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln700_3_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln209_1_fu_898_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln209_1_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln700_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln700_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_905_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_reg_1371 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln67_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln67_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_922_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln66_fu_940_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln66_reg_1389 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln62_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sram_idx_V_assign_3_reg_1394 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_fu_955_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln67_reg_1405 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln67_1_fu_959_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln67_1_reg_1410 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln67_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln67_reg_1415_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1415_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_971_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal lshr_ln_reg_1424 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_reg_1424_pp1_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_reg_1424_pp1_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln67_2_fu_996_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln67_2_reg_1429 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln67_2_reg_1429_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln67_2_reg_1429_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_addr_read_reg_1435 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln67_1_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln67_fu_1078_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln67_reg_1445 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln67_fu_1096_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln67_reg_1451 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln700_fu_1145_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln700_reg_1456 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln700_1_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_1_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_state32_on_subcall_done : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start : STD_LOGIC;
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_idle : STD_LOGIC;
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_range_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_EN_A : STD_LOGIC;
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_WEN_A : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Din_A : STD_LOGIC_VECTOR (127 downto 0);
    signal sram_idx_V_assign_1_0_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal dram_idx_assign_1_0_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_phi_ln89_phi_fu_369_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sram_idx_V_assign_0_reg_376 : STD_LOGIC_VECTOR (15 downto 0);
    signal dram_idx_assign_0_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln89_1_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wgt_mem_1_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln89_fu_880_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal wgt_mem_0_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_mem_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln67_1_fu_1121_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln67_4_fu_1138_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_480_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_fu_494_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal lshr_ln200_1_fu_540_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln301_fu_550_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln200_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln301_fu_554_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln301_1_fu_560_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_573_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_offset_0_V_fu_586_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln209_1_fu_591_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_offset_1_V_fu_604_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln2_fu_609_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_455_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_657_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln1352_1_fu_665_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln89_fu_684_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln89_1_fu_707_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln89_1_fu_715_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln89_2_fu_764_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln89_3_fu_767_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln89_fu_773_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln89_1_fu_779_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln89_3_fu_793_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln89_2_fu_786_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln89_1_fu_800_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln89_4_fu_770_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln89_5_fu_806_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln89_6_fu_810_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln89_7_fu_814_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln89_3_fu_824_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln89_fu_830_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_8_fu_849_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln89_fu_842_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal xor_ln89_2_fu_864_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln89_4_fu_858_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln89_1_fu_869_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln89_2_fu_875_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ret_V_fu_928_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1352_fu_936_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln67_1_fu_977_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln67_1_fu_981_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln67_2_fu_1000_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_17_fu_1007_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln67_2_fu_1019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_3_fu_1023_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln67_fu_1030_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln67_fu_1036_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln67_2_fu_1052_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln67_1_fu_1044_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln67_1_fu_1060_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_4_fu_1027_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln67_5_fu_1066_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln67_6_fu_1070_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln67_7_fu_1074_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln67_3_fu_1084_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln67_fu_1090_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_3_fu_1106_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln67_3_fu_1115_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_5_fu_1127_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln67_8_fu_1134_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_l2g_dep_queue_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_load_queue_V_V_U_apdone_blk : STD_LOGIC;
    signal load_queue_V_V_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal load_queue_V_V_TVALID_int : STD_LOGIC;
    signal load_queue_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_load_queue_V_V_U_ack_in : STD_LOGIC;
    signal regslice_both_g2l_dep_queue_V_U_apdone_blk : STD_LOGIC;
    signal g2l_dep_queue_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal g2l_dep_queue_V_TVALID_int : STD_LOGIC;
    signal g2l_dep_queue_V_TREADY_int : STD_LOGIC;
    signal regslice_both_g2l_dep_queue_V_U_ack_in : STD_LOGIC;
    signal l2g_dep_queue_V_TVALID_int : STD_LOGIC;
    signal l2g_dep_queue_V_TREADY_int : STD_LOGIC;
    signal regslice_both_l2g_dep_queue_V_U_vld_out : STD_LOGIC;
    signal y_offset_0_V_fu_586_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_fu_604_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component reset_mem_ap_uint_64_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sram_idx_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        range_V : IN STD_LOGIC_VECTOR (15 downto 0);
        mem_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_V_EN_A : OUT STD_LOGIC;
        mem_V_WEN_A : OUT STD_LOGIC_VECTOR (15 downto 0);
        mem_V_Din_A : OUT STD_LOGIC_VECTOR (127 downto 0);
        mem_V_Dout_A : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component load_mul_16s_4ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component load_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputs_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component load_data_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    load_CONTROL_BUS_s_axi_U : component load_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputs_V => inputs_V,
        weights_V => weights_V);

    load_data_port_m_axi_U : component load_data_port_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_PORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_port_AWVALID,
        AWREADY => m_axi_data_port_AWREADY,
        AWADDR => m_axi_data_port_AWADDR,
        AWID => m_axi_data_port_AWID,
        AWLEN => m_axi_data_port_AWLEN,
        AWSIZE => m_axi_data_port_AWSIZE,
        AWBURST => m_axi_data_port_AWBURST,
        AWLOCK => m_axi_data_port_AWLOCK,
        AWCACHE => m_axi_data_port_AWCACHE,
        AWPROT => m_axi_data_port_AWPROT,
        AWQOS => m_axi_data_port_AWQOS,
        AWREGION => m_axi_data_port_AWREGION,
        AWUSER => m_axi_data_port_AWUSER,
        WVALID => m_axi_data_port_WVALID,
        WREADY => m_axi_data_port_WREADY,
        WDATA => m_axi_data_port_WDATA,
        WSTRB => m_axi_data_port_WSTRB,
        WLAST => m_axi_data_port_WLAST,
        WID => m_axi_data_port_WID,
        WUSER => m_axi_data_port_WUSER,
        ARVALID => m_axi_data_port_ARVALID,
        ARREADY => m_axi_data_port_ARREADY,
        ARADDR => m_axi_data_port_ARADDR,
        ARID => m_axi_data_port_ARID,
        ARLEN => m_axi_data_port_ARLEN,
        ARSIZE => m_axi_data_port_ARSIZE,
        ARBURST => m_axi_data_port_ARBURST,
        ARLOCK => m_axi_data_port_ARLOCK,
        ARCACHE => m_axi_data_port_ARCACHE,
        ARPROT => m_axi_data_port_ARPROT,
        ARQOS => m_axi_data_port_ARQOS,
        ARREGION => m_axi_data_port_ARREGION,
        ARUSER => m_axi_data_port_ARUSER,
        RVALID => m_axi_data_port_RVALID,
        RREADY => m_axi_data_port_RREADY,
        RDATA => m_axi_data_port_RDATA,
        RLAST => m_axi_data_port_RLAST,
        RID => m_axi_data_port_RID,
        RUSER => m_axi_data_port_RUSER,
        RRESP => m_axi_data_port_RRESP,
        BVALID => m_axi_data_port_BVALID,
        BREADY => m_axi_data_port_BREADY,
        BRESP => m_axi_data_port_BRESP,
        BID => m_axi_data_port_BID,
        BUSER => m_axi_data_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_port_ARVALID,
        I_ARREADY => data_port_ARREADY,
        I_ARADDR => data_port_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => data_port_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_port_RVALID,
        I_RREADY => data_port_RREADY,
        I_RDATA => data_port_RDATA,
        I_RID => data_port_RID,
        I_RUSER => data_port_RUSER,
        I_RRESP => data_port_RRESP,
        I_RLAST => data_port_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data_port_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data_port_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => data_port_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data_port_BRESP,
        I_BID => data_port_BID,
        I_BUSER => data_port_BUSER);

    grp_reset_mem_ap_uint_64_2_s_fu_418 : component reset_mem_ap_uint_64_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start,
        ap_done => grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done,
        ap_idle => grp_reset_mem_ap_uint_64_2_s_fu_418_ap_idle,
        ap_ready => grp_reset_mem_ap_uint_64_2_s_fu_418_ap_ready,
        sram_idx_V_read => grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read,
        range_V => grp_reset_mem_ap_uint_64_2_s_fu_418_range_V,
        mem_V_Addr_A => grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Addr_A,
        mem_V_EN_A => grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_EN_A,
        mem_V_WEN_A => grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_WEN_A,
        mem_V_Din_A => grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Din_A,
        mem_V_Dout_A => ap_const_lv128_lc_1,
        ap_return => grp_reset_mem_ap_uint_64_2_s_fu_418_ap_return);

    load_mul_16s_4ns_16_1_1_U3 : component load_mul_16s_4ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => x_width_V_reg_1209,
        din1 => y_offset_0_V_fu_586_p1,
        dout => y_offset_0_V_fu_586_p2);

    load_mul_16s_4ns_16_1_1_U4 : component load_mul_16s_4ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => x_width_V_reg_1209,
        din1 => y_offset_1_V_fu_604_p1,
        dout => y_offset_1_V_fu_604_p2);

    regslice_both_load_queue_V_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => load_queue_V_V_TDATA,
        vld_in => load_queue_V_V_TVALID,
        ack_in => regslice_both_load_queue_V_V_U_ack_in,
        data_out => load_queue_V_V_TDATA_int,
        vld_out => load_queue_V_V_TVALID_int,
        ack_out => load_queue_V_V_TREADY_int,
        apdone_blk => regslice_both_load_queue_V_V_U_apdone_blk);

    regslice_both_g2l_dep_queue_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => g2l_dep_queue_V_TDATA,
        vld_in => g2l_dep_queue_V_TVALID,
        ack_in => regslice_both_g2l_dep_queue_V_U_ack_in,
        data_out => g2l_dep_queue_V_TDATA_int,
        vld_out => g2l_dep_queue_V_TVALID_int,
        ack_out => g2l_dep_queue_V_TREADY_int,
        apdone_blk => regslice_both_g2l_dep_queue_V_U_apdone_blk);

    regslice_both_l2g_dep_queue_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_1,
        vld_in => l2g_dep_queue_V_TVALID_int,
        ack_in => l2g_dep_queue_V_TREADY_int,
        data_out => l2g_dep_queue_V_TDATA,
        vld_out => regslice_both_l2g_dep_queue_V_U_vld_out,
        ack_out => l2g_dep_queue_V_TREADY,
        apdone_blk => regslice_both_l2g_dep_queue_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln62_fu_916_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln62_fu_916_p2 = ap_const_lv1_0)))) then 
                    grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_ready = ap_const_logic_1)) then 
                    grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dram_idx_assign_0_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    dram_idx_assign_0_reg_386 <= add_ln700_1_reg_1461;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    dram_idx_assign_0_reg_386 <= tmp_V_reg_1172(56 downto 25);
                end if;
            end if; 
        end if;
    end process;

    dram_idx_assign_1_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dram_idx_assign_1_0_reg_344 <= add_ln700_3_fu_893_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then 
                dram_idx_assign_1_0_reg_344 <= tmp_V_reg_1172(56 downto 25);
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_op_assign_1_reg_354 <= y_1_reg_1256;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then 
                i_op_assign_1_reg_354 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    i_op_assign_reg_396 <= y_reg_1384;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    i_op_assign_reg_396 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln67_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln67_fu_966_p2 = ap_const_lv1_0))) then 
                phi_ln67_reg_407 <= add_ln67_fu_971_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                phi_ln67_reg_407 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    phi_ln89_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1277 = ap_const_lv1_0))) then 
                phi_ln89_reg_365 <= add_ln89_reg_1281;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_ln89_reg_365 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    sram_idx_V_assign_1_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sram_idx_V_assign_1_0_reg_334 <= add_ln700_2_fu_888_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then 
                sram_idx_V_assign_1_0_reg_334 <= tmp_V_reg_1172(24 downto 9);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln62_fu_916_p2 = ap_const_lv1_0))) then
                add_ln66_reg_1389 <= add_ln66_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln700_1_reg_1461 <= add_ln700_1_fu_1150_p2;
                add_ln700_reg_1456 <= add_ln700_fu_1145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln219_reg_1234 = ap_const_lv1_1) and (icmp_ln86_fu_645_p2 = ap_const_lv1_0))) then
                add_ln88_reg_1261 <= add_ln88_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln89_reg_1281 <= add_ln89_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln67_reg_1415_pp1_iter1_reg = ap_const_lv1_0))) then
                and_ln67_reg_1451 <= and_ln67_fu_1096_p2;
                icmp_ln67_1_reg_1440 <= icmp_ln67_1_fu_1013_p2;
                shl_ln67_reg_1445 <= shl_ln67_fu_1078_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln89_reg_1340 <= and_ln89_fu_836_p2;
                icmp_ln89_reg_1277 <= icmp_ln89_fu_696_p2;
                shl_ln89_reg_1334 <= shl_ln89_fu_818_p2;
                trunc_ln89_2_reg_1286_pp0_iter1_reg <= trunc_ln89_2_reg_1286;
                wgt_mem_0_V_addr_reg_1324 <= zext_ln89_1_fu_759_p1(10 - 1 downto 0);
                wgt_mem_1_V_addr_reg_1329 <= zext_ln89_1_fu_759_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1277 = ap_const_lv1_0))) then
                data_port_addr_1_read_reg_1301 <= data_port_RDATA;
                    empty_20_reg_1311(9 downto 6) <= empty_20_fu_747_p2(9 downto 6);
                icmp_ln89_1_reg_1316 <= icmp_ln89_1_fu_753_p2;
                    shl_ln89_2_reg_1306(9 downto 6) <= shl_ln89_2_fu_740_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln67_reg_1415 = ap_const_lv1_0))) then
                data_port_addr_read_reg_1435 <= data_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln206_reg_1230 <= icmp_ln206_fu_618_p2;
                y_offset_0_V_reg_1220 <= y_offset_0_V_fu_586_p2;
                y_offset_1_V_reg_1225 <= y_offset_1_V_fu_604_p2;
                    zext_ln200_1_reg_1215(3 downto 0) <= zext_ln200_1_fu_570_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then
                icmp_ln219_reg_1234 <= icmp_ln219_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln67_reg_1415 <= icmp_ln67_fu_966_p2;
                icmp_ln67_reg_1415_pp1_iter1_reg <= icmp_ln67_reg_1415;
                lshr_ln_reg_1424_pp1_iter1_reg <= lshr_ln_reg_1424;
                trunc_ln67_2_reg_1429_pp1_iter1_reg <= trunc_ln67_2_reg_1429;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln67_reg_1415_pp1_iter2_reg <= icmp_ln67_reg_1415_pp1_iter1_reg;
                lshr_ln_reg_1424_pp1_iter2_reg <= lshr_ln_reg_1424_pp1_iter1_reg;
                trunc_ln67_2_reg_1429_pp1_iter2_reg <= trunc_ln67_2_reg_1429_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_fu_696_p2 = ap_const_lv1_0))) then
                lshr_ln1_reg_1291 <= add_ln89_1_fu_715_p2(16 downto 5);
                tmp_9_reg_1296 <= ap_phi_mux_phi_ln89_phi_fu_369_p4(4 downto 1);
                trunc_ln89_2_reg_1286 <= trunc_ln89_2_fu_711_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln67_fu_966_p2 = ap_const_lv1_0))) then
                lshr_ln_reg_1424 <= add_ln67_1_fu_981_p2(13 downto 1);
                trunc_ln67_2_reg_1429 <= trunc_ln67_2_fu_996_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (load_queue_V_V_TVALID_int = ap_const_logic_0) or ((g2l_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_508_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_cast7_reg_1167(28 downto 0) <= p_cast7_fu_504_p1(28 downto 0);
                    p_cast8_reg_1162(28 downto 0) <= p_cast8_fu_490_p1(28 downto 0);
                tmp_V_reg_1172 <= load_queue_V_V_TDATA_int;
                trunc_ln200_1_reg_1196 <= load_queue_V_V_TDATA_int(95 downto 80);
                trunc_ln200_2_reg_1204 <= trunc_ln200_2_fu_546_p1;
                trunc_ln200_reg_1191 <= trunc_ln200_fu_522_p1;
                x_width_V_reg_1209 <= x_width_V_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0)))) then
                reg_464 <= tmp_V_reg_1172(24 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0)))) then
                reg_476 <= tmp_V_reg_1172(79 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln219_fu_624_p2 = ap_const_lv1_1) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_1243(20 downto 5) <= shl_ln1_fu_634_p3(20 downto 5);
                    zext_ln700_1_reg_1238(15 downto 0) <= zext_ln700_1_fu_630_p1(15 downto 0);
                    zext_ln89_reg_1248(20 downto 5) <= zext_ln89_fu_641_p1(20 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    shl_ln67_1_reg_1410(13 downto 1) <= shl_ln67_1_fu_959_p3(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    shl_ln89_1_reg_1272(16 downto 5) <= shl_ln89_1_fu_688_p3(16 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    shl_ln_reg_1371(16 downto 1) <= shl_ln_fu_905_p3(16 downto 1);
                    zext_ln209_1_reg_1361(3 downto 0) <= zext_ln209_1_fu_898_p1(3 downto 0);
                    zext_ln67_reg_1376(16 downto 1) <= zext_ln67_fu_912_p1(16 downto 1);
                    zext_ln700_reg_1366(15 downto 0) <= zext_ln700_fu_901_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then
                sram_idx_V_assign_0_reg_376 <= grp_reset_mem_ap_uint_64_2_s_fu_418_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) or (data_port_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                sram_idx_V_assign_3_reg_1394 <= grp_reset_mem_ap_uint_64_2_s_fu_418_ap_return;
                trunc_ln67_reg_1405 <= trunc_ln67_fu_955_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state32_on_subcall_done) or (ap_const_boolean_1 = ap_block_state32_io))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                tmp_7_reg_1471 <= tmp_V_reg_1172(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln219_reg_1234 = ap_const_lv1_1))) then
                y_1_reg_1256 <= y_1_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                y_reg_1384 <= y_fu_922_p2;
            end if;
        end if;
    end process;
    p_cast8_reg_1162(37 downto 29) <= "000000000";
    p_cast7_reg_1167(33 downto 29) <= "00000";
    zext_ln200_1_reg_1215(15 downto 4) <= "000000000000";
    zext_ln700_1_reg_1238(31 downto 16) <= "0000000000000000";
    shl_ln1_reg_1243(4 downto 0) <= "00000";
    zext_ln89_reg_1248(4 downto 0) <= "00000";
    zext_ln89_reg_1248(31 downto 21) <= "00000000000";
    shl_ln89_1_reg_1272(4 downto 0) <= "00000";
    shl_ln89_2_reg_1306(5 downto 0) <= "000000";
    empty_20_reg_1311(5 downto 0) <= "111111";
    zext_ln209_1_reg_1361(15 downto 4) <= "000000000000";
    zext_ln700_reg_1366(31 downto 16) <= "0000000000000000";
    shl_ln_reg_1371(0) <= '0';
    zext_ln67_reg_1376(0) <= '0';
    zext_ln67_reg_1376(31 downto 17) <= "000000000000000";
    shl_ln67_1_reg_1410(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state19, ap_enable_reg_pp1_iter1, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_2_fu_508_p3, ap_CS_fsm_state32, ap_CS_fsm_state33, data_port_ARREADY, ap_CS_fsm_state2, icmp_ln206_fu_618_p2, ap_CS_fsm_state17, grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done, icmp_ln219_reg_1234, ap_CS_fsm_state3, icmp_ln86_fu_645_p2, icmp_ln89_fu_696_p2, ap_CS_fsm_state18, icmp_ln62_fu_916_p2, icmp_ln67_fu_966_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state31, ap_block_state32_io, ap_block_state32_on_subcall_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, regslice_both_l2g_dep_queue_V_U_apdone_blk, ap_block_state33_io, load_queue_V_V_TVALID_int, g2l_dep_queue_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (load_queue_V_V_TVALID_int = ap_const_logic_0) or ((g2l_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_508_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln206_fu_618_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln86_fu_645_p2 = ap_const_lv1_1) or (icmp_ln219_reg_1234 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_696_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_696_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln62_fu_916_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) or (data_port_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln67_fu_966_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln67_fu_966_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not(((ap_const_boolean_1 = ap_block_state32_on_subcall_done) or (ap_const_boolean_1 = ap_block_state32_io))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((ap_const_boolean_1 = ap_block_state33_io) or (regslice_both_l2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln301_fu_554_p2 <= std_logic_vector(unsigned(zext_ln301_fu_550_p1) + unsigned(zext_ln200_fu_526_p1));
    add_ln66_fu_940_p2 <= std_logic_vector(unsigned(p_cast7_reg_1167) + unsigned(zext_ln1352_fu_936_p1));
    add_ln67_1_fu_981_p2 <= std_logic_vector(unsigned(shl_ln67_1_reg_1410) + unsigned(trunc_ln67_1_fu_977_p1));
    add_ln67_fu_971_p2 <= std_logic_vector(unsigned(phi_ln67_reg_407) + unsigned(ap_const_lv17_1));
    add_ln700_1_fu_1150_p2 <= std_logic_vector(unsigned(zext_ln700_reg_1366) + unsigned(dram_idx_assign_0_reg_386));
    add_ln700_2_fu_888_p2 <= std_logic_vector(unsigned(trunc_ln200_1_reg_1196) + unsigned(sram_idx_V_assign_1_0_reg_334));
    add_ln700_3_fu_893_p2 <= std_logic_vector(unsigned(zext_ln700_1_reg_1238) + unsigned(dram_idx_assign_1_0_reg_344));
    add_ln700_fu_1145_p2 <= std_logic_vector(unsigned(sram_idx_V_assign_3_reg_1394) + unsigned(trunc_ln200_1_reg_1196));
    add_ln88_fu_669_p2 <= std_logic_vector(unsigned(p_cast8_reg_1162) + unsigned(zext_ln1352_1_fu_665_p1));
    add_ln89_1_fu_715_p2 <= std_logic_vector(unsigned(trunc_ln89_1_fu_707_p1) + unsigned(shl_ln89_1_reg_1272));
    add_ln89_fu_701_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln89_phi_fu_369_p4) + unsigned(ap_const_lv21_1));
    and_ln67_1_fu_1121_p2 <= (select_ln67_3_fu_1115_p3 and and_ln67_reg_1451);
    and_ln67_fu_1096_p2 <= (shl_ln67_3_fu_1084_p2 and lshr_ln67_fu_1090_p2);
    and_ln89_1_fu_869_p2 <= (xor_ln89_2_fu_864_p2 and select_ln89_fu_842_p3);
    and_ln89_2_fu_875_p2 <= (select_ln89_4_fu_858_p3 and and_ln89_reg_1340);
    and_ln89_fu_836_p2 <= (shl_ln89_3_fu_824_p2 and lshr_ln89_fu_830_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln89_reg_1277, data_port_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_reg_1277 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln89_reg_1277, data_port_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_reg_1277 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln67_reg_1415, data_port_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln67_reg_1415 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln67_reg_1415, data_port_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln67_reg_1415 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, tmp_2_fu_508_p3, load_queue_V_V_TVALID_int, g2l_dep_queue_V_TVALID_int)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (load_queue_V_V_TVALID_int = ap_const_logic_0) or ((g2l_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_508_p3 = ap_const_lv1_1)));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage1_iter0_assign_proc : process(icmp_ln89_reg_1277, data_port_RVALID)
    begin
                ap_block_state12_pp0_stage1_iter0 <= ((data_port_RVALID = ap_const_logic_0) and (icmp_ln89_reg_1277 = ap_const_lv1_0));
    end process;

        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp1_stage0_iter1_assign_proc : process(icmp_ln67_reg_1415, data_port_RVALID)
    begin
                ap_block_state27_pp1_stage0_iter1 <= ((data_port_RVALID = ap_const_logic_0) and (icmp_ln67_reg_1415 = ap_const_lv1_0));
    end process;

        ap_block_state28_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(tmp_7_fu_1155_p3, l2g_dep_queue_V_TREADY_int)
    begin
                ap_block_state32_io <= ((l2g_dep_queue_V_TREADY_int = ap_const_logic_0) and (tmp_7_fu_1155_p3 = ap_const_lv1_1));
    end process;


    ap_block_state32_on_subcall_done_assign_proc : process(grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done, icmp_ln206_reg_1230)
    begin
                ap_block_state32_on_subcall_done <= ((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) and (icmp_ln206_reg_1230 = ap_const_lv1_1));
    end process;


    ap_block_state33_io_assign_proc : process(tmp_7_reg_1471, l2g_dep_queue_V_TREADY_int)
    begin
                ap_block_state33_io <= ((l2g_dep_queue_V_TREADY_int = ap_const_logic_0) and (tmp_7_reg_1471 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln89_fu_696_p2)
    begin
        if ((icmp_ln89_fu_696_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(icmp_ln67_fu_966_p2)
    begin
        if ((icmp_ln67_fu_966_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state33, regslice_both_l2g_dep_queue_V_U_apdone_blk, ap_block_state33_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state33_io) or (regslice_both_l2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln89_phi_fu_369_p4_assign_proc : process(icmp_ln89_reg_1277, phi_ln89_reg_365, ap_CS_fsm_pp0_stage0, add_ln89_reg_1281, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1277 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln89_phi_fu_369_p4 <= add_ln89_reg_1281;
        else 
            ap_phi_mux_phi_ln89_phi_fu_369_p4 <= phi_ln89_reg_365;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33, regslice_both_l2g_dep_queue_V_U_apdone_blk, ap_block_state33_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state33_io) or (regslice_both_l2g_dep_queue_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_port_ARADDR_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state4, data_port_ARREADY, grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done, zext_ln88_fu_674_p1, zext_ln66_fu_945_p1)
    begin
        if ((not(((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) or (data_port_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            data_port_ARADDR <= zext_ln66_fu_945_p1(32 - 1 downto 0);
        elsif (((data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_port_ARADDR <= zext_ln88_fu_674_p1(32 - 1 downto 0);
        else 
            data_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_port_ARLEN_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state4, data_port_ARREADY, grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done, zext_ln89_reg_1248, zext_ln67_reg_1376)
    begin
        if ((not(((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) or (data_port_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            data_port_ARLEN <= zext_ln67_reg_1376;
        elsif (((data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_port_ARLEN <= zext_ln89_reg_1248;
        else 
            data_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_port_ARVALID_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state4, data_port_ARREADY, grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done)
    begin
        if ((((data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((grp_reset_mem_ap_uint_64_2_s_fu_418_ap_done = ap_const_logic_0) or (data_port_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            data_port_ARVALID <= ap_const_logic_1;
        else 
            data_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_port_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln67_reg_1415, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln89_reg_1277, ap_block_pp0_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1277 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln67_reg_1415 = ap_const_lv1_0)))) then 
            data_port_RREADY <= ap_const_logic_1;
        else 
            data_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_port_blk_n_AR_assign_proc : process(m_axi_data_port_ARREADY, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            data_port_blk_n_AR <= m_axi_data_port_ARREADY;
        else 
            data_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_port_blk_n_R_assign_proc : process(m_axi_data_port_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln67_reg_1415, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln89_reg_1277)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln89_reg_1277 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln67_reg_1415 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            data_port_blk_n_R <= m_axi_data_port_RVALID;
        else 
            data_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    empty_17_fu_1007_p2 <= (shl_ln67_2_fu_1000_p3 or ap_const_lv7_3F);
    empty_20_fu_747_p2 <= (shl_ln89_2_fu_740_p3 or ap_const_lv10_3F);

    g2l_dep_queue_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_508_p3, g2l_dep_queue_V_TVALID_int)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_2_fu_508_p3 = ap_const_lv1_1))) then 
            g2l_dep_queue_V_TDATA_blk_n <= g2l_dep_queue_V_TVALID_int;
        else 
            g2l_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g2l_dep_queue_V_TREADY_assign_proc : process(g2l_dep_queue_V_TVALID, regslice_both_g2l_dep_queue_V_U_ack_in)
    begin
        if (((regslice_both_g2l_dep_queue_V_U_ack_in = ap_const_logic_1) and (g2l_dep_queue_V_TVALID = ap_const_logic_1))) then 
            g2l_dep_queue_V_TREADY <= ap_const_logic_1;
        else 
            g2l_dep_queue_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    g2l_dep_queue_V_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_508_p3, load_queue_V_V_TVALID_int, g2l_dep_queue_V_TVALID_int)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (load_queue_V_V_TVALID_int = ap_const_logic_0) or ((g2l_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_508_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_2_fu_508_p3 = ap_const_lv1_1))) then 
            g2l_dep_queue_V_TREADY_int <= ap_const_logic_1;
        else 
            g2l_dep_queue_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_455_p4 <= tmp_V_reg_1172(111 downto 96);
    grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start <= grp_reset_mem_ap_uint_64_2_s_fu_418_ap_start_reg;

    grp_reset_mem_ap_uint_64_2_s_fu_418_range_V_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, zext_ln200_1_reg_1215, y_offset_0_V_reg_1220, y_offset_1_V_reg_1225, icmp_ln206_reg_1230, zext_ln209_1_reg_1361, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_range_V <= zext_ln200_1_reg_1215;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1))) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_range_V <= y_offset_1_V_reg_1225;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_range_V <= zext_ln209_1_reg_1361;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_range_V <= y_offset_0_V_reg_1220;
        else 
            grp_reset_mem_ap_uint_64_2_s_fu_418_range_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state32, reg_464, ap_CS_fsm_state17, icmp_ln206_reg_1230, add_ln700_reg_1456, ap_CS_fsm_state31, sram_idx_V_assign_0_reg_376)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read <= add_ln700_reg_1456;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1)))) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read <= sram_idx_V_assign_0_reg_376;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read <= reg_464;
        else 
            grp_reset_mem_ap_uint_64_2_s_fu_418_sram_idx_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln206_fu_618_p2 <= "1" when (trunc_ln2_fu_609_p4 = ap_const_lv2_2) else "0";
    icmp_ln219_fu_624_p2 <= "1" when (trunc_ln2_fu_609_p4 = ap_const_lv2_1) else "0";
    icmp_ln62_fu_916_p2 <= "1" when (i_op_assign_reg_396 = reg_476) else "0";
    icmp_ln67_1_fu_1013_p2 <= "1" when (unsigned(shl_ln67_2_fu_1000_p3) > unsigned(empty_17_fu_1007_p2)) else "0";
    icmp_ln67_fu_966_p2 <= "1" when (phi_ln67_reg_407 = shl_ln_reg_1371) else "0";
    icmp_ln86_fu_645_p2 <= "1" when (i_op_assign_1_reg_354 = reg_476) else "0";
    icmp_ln89_1_fu_753_p2 <= "1" when (unsigned(shl_ln89_2_fu_740_p3) > unsigned(empty_20_fu_747_p2)) else "0";
    icmp_ln89_fu_696_p2 <= "1" when (ap_phi_mux_phi_ln89_phi_fu_369_p4 = shl_ln1_reg_1243) else "0";

    inp_mem_V_Addr_A_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, icmp_ln206_reg_1230, ap_CS_fsm_state31, grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Addr_A, inp_mem_V_Addr_A_orig)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1)))) then 
            inp_mem_V_Addr_A <= grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Addr_A;
        else 
            inp_mem_V_Addr_A <= std_logic_vector(shift_left(unsigned(inp_mem_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
        end if; 
    end process;

    inp_mem_V_Addr_A_orig <= zext_ln67_1_fu_1102_p1(32 - 1 downto 0);
    inp_mem_V_Clk_A <= ap_clk;

    inp_mem_V_Din_A_assign_proc : process(ap_CS_fsm_state19, ap_block_pp1_stage0, ap_CS_fsm_state32, ap_CS_fsm_state17, icmp_ln206_reg_1230, ap_CS_fsm_state31, ap_enable_reg_pp1_iter3, grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Din_A, and_ln67_1_fu_1121_p2)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            inp_mem_V_Din_A <= and_ln67_1_fu_1121_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1)))) then 
            inp_mem_V_Din_A <= grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_Din_A;
        else 
            inp_mem_V_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inp_mem_V_EN_A_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, icmp_ln206_reg_1230, ap_block_pp1_stage0_11001, ap_CS_fsm_state31, ap_enable_reg_pp1_iter3, grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_EN_A)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            inp_mem_V_EN_A <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1)))) then 
            inp_mem_V_EN_A <= grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_EN_A;
        else 
            inp_mem_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inp_mem_V_Rst_A <= ap_rst_n_inv;

    inp_mem_V_WEN_A_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state17, icmp_ln206_reg_1230, ap_block_pp1_stage0_11001, icmp_ln67_reg_1415_pp1_iter2_reg, ap_CS_fsm_state31, ap_enable_reg_pp1_iter3, grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_WEN_A, shl_ln67_4_fu_1138_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln67_reg_1415_pp1_iter2_reg = ap_const_lv1_0))) then 
            inp_mem_V_WEN_A <= shl_ln67_4_fu_1138_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln206_reg_1230 = ap_const_lv1_1)))) then 
            inp_mem_V_WEN_A <= grp_reset_mem_ap_uint_64_2_s_fu_418_mem_V_WEN_A;
        else 
            inp_mem_V_WEN_A <= ap_const_lv16_0;
        end if; 
    end process;


    l2g_dep_queue_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state32, tmp_7_fu_1155_p3, ap_CS_fsm_state33, tmp_7_reg_1471, l2g_dep_queue_V_TREADY_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state33) and (tmp_7_reg_1471 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_7_fu_1155_p3 = ap_const_lv1_1)))) then 
            l2g_dep_queue_V_TDATA_blk_n <= l2g_dep_queue_V_TREADY_int;
        else 
            l2g_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l2g_dep_queue_V_TVALID <= regslice_both_l2g_dep_queue_V_U_vld_out;

    l2g_dep_queue_V_TVALID_int_assign_proc : process(ap_CS_fsm_state32, tmp_7_fu_1155_p3, ap_block_state32_io, ap_block_state32_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state32_on_subcall_done) or (ap_const_boolean_1 = ap_block_state32_io))) and (ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_7_fu_1155_p3 = ap_const_lv1_1))) then 
            l2g_dep_queue_V_TVALID_int <= ap_const_logic_1;
        else 
            l2g_dep_queue_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    load_queue_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, load_queue_V_V_TVALID_int)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            load_queue_V_V_TDATA_blk_n <= load_queue_V_V_TVALID_int;
        else 
            load_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    load_queue_V_V_TREADY_assign_proc : process(load_queue_V_V_TVALID, regslice_both_load_queue_V_V_U_ack_in)
    begin
        if (((regslice_both_load_queue_V_V_U_ack_in = ap_const_logic_1) and (load_queue_V_V_TVALID = ap_const_logic_1))) then 
            load_queue_V_V_TREADY <= ap_const_logic_1;
        else 
            load_queue_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    load_queue_V_V_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_2_fu_508_p3, load_queue_V_V_TVALID_int, g2l_dep_queue_V_TVALID_int)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (load_queue_V_V_TVALID_int = ap_const_logic_0) or ((g2l_dep_queue_V_TVALID_int = ap_const_logic_0) and (tmp_2_fu_508_p3 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            load_queue_V_V_TREADY_int <= ap_const_logic_1;
        else 
            load_queue_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln200_1_fu_540_p2 <= std_logic_vector(shift_right(unsigned(load_queue_V_V_TDATA_int),to_integer(unsigned('0' & ap_const_lv128_lc_5(31-1 downto 0)))));
    lshr_ln200_fu_516_p2 <= std_logic_vector(shift_right(unsigned(load_queue_V_V_TDATA_int),to_integer(unsigned('0' & ap_const_lv128_lc_4(31-1 downto 0)))));
    lshr_ln67_fu_1090_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln67_7_fu_1074_p1(31-1 downto 0)))));
    lshr_ln89_fu_830_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_6),to_integer(unsigned('0' & zext_ln89_7_fu_814_p1(31-1 downto 0)))));
    or_ln89_fu_880_p2 <= (and_ln89_2_fu_875_p2 or and_ln89_1_fu_869_p2);
    p_cast7_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_494_p4),34));
    p_cast8_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_480_p4),38));
    ret_V_1_fu_657_p3 <= (dram_idx_assign_1_0_reg_344 & ap_const_lv5_0);
    ret_V_fu_928_p3 <= (dram_idx_assign_0_reg_386 & ap_const_lv1_0);
    select_ln67_1_fu_1044_p3 <= 
        zext_ln67_3_fu_1023_p1 when (icmp_ln67_1_fu_1013_p2(0) = '1') else 
        zext_ln67_2_fu_1019_p1;
    select_ln67_2_fu_1052_p3 <= 
        xor_ln67_fu_1030_p2 when (icmp_ln67_1_fu_1013_p2(0) = '1') else 
        zext_ln67_2_fu_1019_p1;
    select_ln67_3_fu_1115_p3 <= 
        tmp_3_fu_1106_p4 when (icmp_ln67_1_reg_1440(0) = '1') else 
        shl_ln67_reg_1445;
    select_ln67_fu_1036_p3 <= 
        zext_ln67_2_fu_1019_p1 when (icmp_ln67_1_fu_1013_p2(0) = '1') else 
        zext_ln67_3_fu_1023_p1;
    select_ln89_1_fu_779_p3 <= 
        zext_ln89_2_fu_764_p1 when (icmp_ln89_1_reg_1316(0) = '1') else 
        zext_ln89_3_fu_767_p1;
    select_ln89_2_fu_786_p3 <= 
        zext_ln89_3_fu_767_p1 when (icmp_ln89_1_reg_1316(0) = '1') else 
        zext_ln89_2_fu_764_p1;
    select_ln89_3_fu_793_p3 <= 
        xor_ln89_fu_773_p2 when (icmp_ln89_1_reg_1316(0) = '1') else 
        zext_ln89_2_fu_764_p1;
    select_ln89_4_fu_858_p3 <= 
        tmp_8_fu_849_p4 when (icmp_ln89_1_reg_1316(0) = '1') else 
        shl_ln89_reg_1334;
    select_ln89_fu_842_p3 <= 
        wgt_mem_1_V_Dout_A when (trunc_ln89_2_reg_1286_pp0_iter1_reg(0) = '1') else 
        wgt_mem_0_V_Dout_A;
    shl_ln1_fu_634_p3 <= (trunc_ln200_1_reg_1196 & ap_const_lv5_0);
    shl_ln67_1_fu_959_p3 <= (trunc_ln67_reg_1405 & ap_const_lv1_0);
    shl_ln67_2_fu_1000_p3 <= (trunc_ln67_2_reg_1429_pp1_iter1_reg & ap_const_lv6_0);
    shl_ln67_3_fu_1084_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln67_6_fu_1070_p1(31-1 downto 0)))));
    shl_ln67_4_fu_1138_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FF),to_integer(unsigned('0' & zext_ln67_8_fu_1134_p1(16-1 downto 0)))));
    shl_ln67_fu_1078_p2 <= std_logic_vector(shift_left(unsigned(zext_ln67_4_fu_1027_p1),to_integer(unsigned('0' & zext_ln67_5_fu_1066_p1(31-1 downto 0)))));
    shl_ln89_1_fu_688_p3 <= (trunc_ln89_fu_684_p1 & ap_const_lv5_0);
    shl_ln89_2_fu_740_p3 <= (tmp_9_reg_1296 & ap_const_lv6_0);
    shl_ln89_3_fu_824_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_6),to_integer(unsigned('0' & zext_ln89_6_fu_810_p1(31-1 downto 0)))));
    shl_ln89_fu_818_p2 <= std_logic_vector(shift_left(unsigned(zext_ln89_4_fu_770_p1),to_integer(unsigned('0' & zext_ln89_5_fu_806_p1(31-1 downto 0)))));
    shl_ln_fu_905_p3 <= (trunc_ln200_1_reg_1196 & ap_const_lv1_0);
    tmp_1_fu_494_p4 <= inputs_V(31 downto 3);
    tmp_2_fu_508_p3 <= load_queue_V_V_TDATA_int(4 downto 4);
    
    tmp_3_fu_1106_p4_proc : process(shl_ln67_reg_1445)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_3_fu_1106_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln67_reg_1445;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_3_fu_1106_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_3_fu_1106_p4_i) := shl_ln67_reg_1445(128-1-tmp_3_fu_1106_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_1106_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_5_fu_1127_p3 <= (trunc_ln67_2_reg_1429_pp1_iter2_reg & ap_const_lv3_0);
    tmp_7_fu_1155_p3 <= tmp_V_reg_1172(6 downto 6);
    
    tmp_8_fu_849_p4_proc : process(shl_ln89_reg_1334)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_8_fu_849_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := shl_ln89_reg_1334;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_8_fu_849_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_8_fu_849_p4_i) := shl_ln89_reg_1334(1024-1-tmp_8_fu_849_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_849_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_fu_480_p4 <= weights_V(31 downto 3);
    trunc_ln1_fu_573_p4 <= tmp_V_reg_1172(115 downto 112);
    trunc_ln200_1_fu_530_p4 <= load_queue_V_V_TDATA_int(95 downto 80);
    trunc_ln200_2_fu_546_p1 <= lshr_ln200_1_fu_540_p2(4 - 1 downto 0);
    trunc_ln200_fu_522_p1 <= lshr_ln200_fu_516_p2(4 - 1 downto 0);
    trunc_ln209_1_fu_591_p4 <= tmp_V_reg_1172(119 downto 116);
    trunc_ln2_fu_609_p4 <= tmp_V_reg_1172(8 downto 7);
    trunc_ln67_1_fu_977_p1 <= phi_ln67_reg_407(14 - 1 downto 0);
    trunc_ln67_2_fu_996_p1 <= phi_ln67_reg_407(1 - 1 downto 0);
    trunc_ln67_fu_955_p1 <= grp_reset_mem_ap_uint_64_2_s_fu_418_ap_return(13 - 1 downto 0);
    trunc_ln89_1_fu_707_p1 <= ap_phi_mux_phi_ln89_phi_fu_369_p4(17 - 1 downto 0);
    trunc_ln89_2_fu_711_p1 <= ap_phi_mux_phi_ln89_phi_fu_369_p4(1 - 1 downto 0);
    trunc_ln89_fu_684_p1 <= sram_idx_V_assign_1_0_reg_334(12 - 1 downto 0);
    wgt_mem_0_V_Addr_A <= std_logic_vector(shift_left(unsigned(wgt_mem_0_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));

    wgt_mem_0_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, wgt_mem_0_V_addr_reg_1324, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln89_1_fu_759_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                wgt_mem_0_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wgt_mem_0_V_addr_reg_1324),32));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                wgt_mem_0_V_Addr_A_orig <= zext_ln89_1_fu_759_p1(32 - 1 downto 0);
            else 
                wgt_mem_0_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            wgt_mem_0_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wgt_mem_0_V_Clk_A <= ap_clk;
    wgt_mem_0_V_Din_A <= or_ln89_fu_880_p2;

    wgt_mem_0_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wgt_mem_0_V_EN_A <= ap_const_logic_1;
        else 
            wgt_mem_0_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    wgt_mem_0_V_Rst_A <= ap_rst_n_inv;

    wgt_mem_0_V_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, trunc_ln89_2_reg_1286_pp0_iter1_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln89_2_reg_1286_pp0_iter1_reg = ap_const_lv1_0))) then 
            wgt_mem_0_V_WEN_A <= ap_const_lv128_lc_3;
        else 
            wgt_mem_0_V_WEN_A <= ap_const_lv128_lc_1;
        end if; 
    end process;

    wgt_mem_1_V_Addr_A <= std_logic_vector(shift_left(unsigned(wgt_mem_1_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));

    wgt_mem_1_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, wgt_mem_1_V_addr_reg_1329, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln89_1_fu_759_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                wgt_mem_1_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wgt_mem_1_V_addr_reg_1329),32));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                wgt_mem_1_V_Addr_A_orig <= zext_ln89_1_fu_759_p1(32 - 1 downto 0);
            else 
                wgt_mem_1_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            wgt_mem_1_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wgt_mem_1_V_Clk_A <= ap_clk;
    wgt_mem_1_V_Din_A <= or_ln89_fu_880_p2;

    wgt_mem_1_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wgt_mem_1_V_EN_A <= ap_const_logic_1;
        else 
            wgt_mem_1_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    wgt_mem_1_V_Rst_A <= ap_rst_n_inv;

    wgt_mem_1_V_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, trunc_ln89_2_reg_1286_pp0_iter1_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln89_2_reg_1286_pp0_iter1_reg = ap_const_lv1_1))) then 
            wgt_mem_1_V_WEN_A <= ap_const_lv128_lc_3;
        else 
            wgt_mem_1_V_WEN_A <= ap_const_lv128_lc_1;
        end if; 
    end process;

    x_width_V_fu_564_p2 <= std_logic_vector(unsigned(trunc_ln200_1_fu_530_p4) + unsigned(zext_ln301_1_fu_560_p1));
    xor_ln67_1_fu_1060_p2 <= (select_ln67_fu_1036_p3 xor ap_const_lv8_7F);
    xor_ln67_fu_1030_p2 <= (zext_ln67_2_fu_1019_p1 xor ap_const_lv8_7F);
    xor_ln89_1_fu_800_p2 <= (select_ln89_1_fu_779_p3 xor ap_const_lv11_3FF);
    xor_ln89_2_fu_864_p2 <= (ap_const_lv1024_lc_6 xor and_ln89_reg_1340);
    xor_ln89_fu_773_p2 <= (zext_ln89_2_fu_764_p1 xor ap_const_lv11_3FF);
    y_1_fu_651_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_354) + unsigned(ap_const_lv16_1));
    y_fu_922_p2 <= std_logic_vector(unsigned(i_op_assign_reg_396) + unsigned(ap_const_lv16_1));
    y_offset_0_V_fu_586_p1 <= y_offset_0_V_fu_586_p10(4 - 1 downto 0);
    y_offset_0_V_fu_586_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_573_p4),16));
    y_offset_1_V_fu_604_p1 <= y_offset_1_V_fu_604_p10(4 - 1 downto 0);
    y_offset_1_V_fu_604_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln209_1_fu_591_p4),16));
    zext_ln1352_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_657_p3),38));
    zext_ln1352_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_928_p3),34));
    zext_ln200_1_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln200_2_reg_1204),16));
    zext_ln200_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln200_fu_522_p1),5));
    zext_ln209_1_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln200_reg_1191),16));
    zext_ln301_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln301_fu_554_p2),16));
    zext_ln301_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln200_2_fu_546_p1),5));
    zext_ln66_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_reg_1389),64));
    zext_ln67_1_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1424_pp1_iter2_reg),64));
    zext_ln67_2_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln67_2_fu_1000_p3),8));
    zext_ln67_3_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_17_fu_1007_p2),8));
    zext_ln67_4_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_port_addr_read_reg_1435),128));
    zext_ln67_5_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_2_fu_1052_p3),128));
    zext_ln67_6_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_1_fu_1044_p3),128));
    zext_ln67_7_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln67_1_fu_1060_p2),128));
    zext_ln67_8_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1127_p3),16));
    zext_ln67_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_905_p3),32));
    zext_ln700_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_455_p4),32));
    zext_ln700_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_455_p4),32));
    zext_ln88_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_reg_1261),64));
    zext_ln89_1_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1291),64));
    zext_ln89_2_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln89_2_reg_1306),11));
    zext_ln89_3_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_reg_1311),11));
    zext_ln89_4_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_port_addr_1_read_reg_1301),1024));
    zext_ln89_5_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_3_fu_793_p3),1024));
    zext_ln89_6_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_2_fu_786_p3),1024));
    zext_ln89_7_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln89_1_fu_800_p2),1024));
    zext_ln89_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_634_p3),32));
end behav;
