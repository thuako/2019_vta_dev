// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fetch,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=972,HLS_SYN_LUT=1189,HLS_VERSION=2019_2}" *)

module fetch (
        ap_clk,
        ap_rst_n,
        m_axi_ins_port_AWVALID,
        m_axi_ins_port_AWREADY,
        m_axi_ins_port_AWADDR,
        m_axi_ins_port_AWID,
        m_axi_ins_port_AWLEN,
        m_axi_ins_port_AWSIZE,
        m_axi_ins_port_AWBURST,
        m_axi_ins_port_AWLOCK,
        m_axi_ins_port_AWCACHE,
        m_axi_ins_port_AWPROT,
        m_axi_ins_port_AWQOS,
        m_axi_ins_port_AWREGION,
        m_axi_ins_port_AWUSER,
        m_axi_ins_port_WVALID,
        m_axi_ins_port_WREADY,
        m_axi_ins_port_WDATA,
        m_axi_ins_port_WSTRB,
        m_axi_ins_port_WLAST,
        m_axi_ins_port_WID,
        m_axi_ins_port_WUSER,
        m_axi_ins_port_ARVALID,
        m_axi_ins_port_ARREADY,
        m_axi_ins_port_ARADDR,
        m_axi_ins_port_ARID,
        m_axi_ins_port_ARLEN,
        m_axi_ins_port_ARSIZE,
        m_axi_ins_port_ARBURST,
        m_axi_ins_port_ARLOCK,
        m_axi_ins_port_ARCACHE,
        m_axi_ins_port_ARPROT,
        m_axi_ins_port_ARQOS,
        m_axi_ins_port_ARREGION,
        m_axi_ins_port_ARUSER,
        m_axi_ins_port_RVALID,
        m_axi_ins_port_RREADY,
        m_axi_ins_port_RDATA,
        m_axi_ins_port_RLAST,
        m_axi_ins_port_RID,
        m_axi_ins_port_RUSER,
        m_axi_ins_port_RRESP,
        m_axi_ins_port_BVALID,
        m_axi_ins_port_BREADY,
        m_axi_ins_port_BRESP,
        m_axi_ins_port_BID,
        m_axi_ins_port_BUSER,
        load_queue_V_V_TDATA,
        load_queue_V_V_TVALID,
        load_queue_V_V_TREADY,
        gemm_queue_V_V_TDATA,
        gemm_queue_V_V_TVALID,
        gemm_queue_V_V_TREADY,
        store_queue_V_V_TDATA,
        store_queue_V_V_TVALID,
        store_queue_V_V_TREADY,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state14 = 10'd512;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INS_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_INS_PORT_DATA_WIDTH = 128;
parameter    C_M_AXI_INS_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_INS_PORT_USER_VALUE = 0;
parameter    C_M_AXI_INS_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_INS_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INS_PORT_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ins_port_AWVALID;
input   m_axi_ins_port_AWREADY;
output  [C_M_AXI_INS_PORT_ADDR_WIDTH - 1:0] m_axi_ins_port_AWADDR;
output  [C_M_AXI_INS_PORT_ID_WIDTH - 1:0] m_axi_ins_port_AWID;
output  [7:0] m_axi_ins_port_AWLEN;
output  [2:0] m_axi_ins_port_AWSIZE;
output  [1:0] m_axi_ins_port_AWBURST;
output  [1:0] m_axi_ins_port_AWLOCK;
output  [3:0] m_axi_ins_port_AWCACHE;
output  [2:0] m_axi_ins_port_AWPROT;
output  [3:0] m_axi_ins_port_AWQOS;
output  [3:0] m_axi_ins_port_AWREGION;
output  [C_M_AXI_INS_PORT_AWUSER_WIDTH - 1:0] m_axi_ins_port_AWUSER;
output   m_axi_ins_port_WVALID;
input   m_axi_ins_port_WREADY;
output  [C_M_AXI_INS_PORT_DATA_WIDTH - 1:0] m_axi_ins_port_WDATA;
output  [C_M_AXI_INS_PORT_WSTRB_WIDTH - 1:0] m_axi_ins_port_WSTRB;
output   m_axi_ins_port_WLAST;
output  [C_M_AXI_INS_PORT_ID_WIDTH - 1:0] m_axi_ins_port_WID;
output  [C_M_AXI_INS_PORT_WUSER_WIDTH - 1:0] m_axi_ins_port_WUSER;
output   m_axi_ins_port_ARVALID;
input   m_axi_ins_port_ARREADY;
output  [C_M_AXI_INS_PORT_ADDR_WIDTH - 1:0] m_axi_ins_port_ARADDR;
output  [C_M_AXI_INS_PORT_ID_WIDTH - 1:0] m_axi_ins_port_ARID;
output  [7:0] m_axi_ins_port_ARLEN;
output  [2:0] m_axi_ins_port_ARSIZE;
output  [1:0] m_axi_ins_port_ARBURST;
output  [1:0] m_axi_ins_port_ARLOCK;
output  [3:0] m_axi_ins_port_ARCACHE;
output  [2:0] m_axi_ins_port_ARPROT;
output  [3:0] m_axi_ins_port_ARQOS;
output  [3:0] m_axi_ins_port_ARREGION;
output  [C_M_AXI_INS_PORT_ARUSER_WIDTH - 1:0] m_axi_ins_port_ARUSER;
input   m_axi_ins_port_RVALID;
output   m_axi_ins_port_RREADY;
input  [C_M_AXI_INS_PORT_DATA_WIDTH - 1:0] m_axi_ins_port_RDATA;
input   m_axi_ins_port_RLAST;
input  [C_M_AXI_INS_PORT_ID_WIDTH - 1:0] m_axi_ins_port_RID;
input  [C_M_AXI_INS_PORT_RUSER_WIDTH - 1:0] m_axi_ins_port_RUSER;
input  [1:0] m_axi_ins_port_RRESP;
input   m_axi_ins_port_BVALID;
output   m_axi_ins_port_BREADY;
input  [1:0] m_axi_ins_port_BRESP;
input  [C_M_AXI_INS_PORT_ID_WIDTH - 1:0] m_axi_ins_port_BID;
input  [C_M_AXI_INS_PORT_BUSER_WIDTH - 1:0] m_axi_ins_port_BUSER;
output  [127:0] load_queue_V_V_TDATA;
output   load_queue_V_V_TVALID;
input   load_queue_V_V_TREADY;
output  [127:0] gemm_queue_V_V_TDATA;
output   gemm_queue_V_V_TVALID;
input   gemm_queue_V_V_TREADY;
output  [127:0] store_queue_V_V_TDATA;
output   store_queue_V_V_TVALID;
input   store_queue_V_V_TREADY;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] insn_count;
wire   [31:0] insns_V;
reg    ins_port_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    ins_port_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    load_queue_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln879_reg_255;
reg   [0:0] icmp_ln879_1_reg_259;
reg   [0:0] tmp_reg_263;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln879_reg_255_pp0_iter3_reg;
reg   [0:0] icmp_ln879_1_reg_259_pp0_iter3_reg;
reg   [0:0] tmp_reg_263_pp0_iter3_reg;
reg    gemm_queue_V_V_TDATA_blk_n;
reg    store_queue_V_V_TDATA_blk_n;
wire    ins_port_AWREADY;
wire    ins_port_WREADY;
reg    ins_port_ARVALID;
wire    ins_port_ARREADY;
wire   [31:0] ins_port_ARADDR;
wire    ins_port_RVALID;
reg    ins_port_RREADY;
wire   [127:0] ins_port_RDATA;
wire    ins_port_RLAST;
wire   [0:0] ins_port_RID;
wire   [0:0] ins_port_RUSER;
wire   [1:0] ins_port_RRESP;
wire    ins_port_BVALID;
wire   [1:0] ins_port_BRESP;
wire   [0:0] ins_port_BID;
wire   [0:0] ins_port_BUSER;
reg   [31:0] pc_0_reg_132;
reg   [31:0] insn_count_read_reg_211;
reg   [27:0] insns_V1_reg_217;
wire   [0:0] icmp_ln145_fu_163_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
reg    ap_predicate_op55_write_state12;
reg    ap_predicate_op56_write_state12;
reg    ap_predicate_op57_write_state12;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter4;
reg    ap_predicate_op62_write_state13;
reg    ap_predicate_op64_write_state13;
reg    ap_predicate_op66_write_state13;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] pc_fu_168_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [127:0] raw_insn_reg_237;
reg   [127:0] raw_insn_reg_237_pp0_iter2_reg;
wire   [2:0] opcode_V_fu_174_p1;
reg   [2:0] opcode_V_reg_244;
reg   [1:0] memory_type_V_reg_250;
wire   [0:0] icmp_ln879_fu_188_p2;
wire   [0:0] icmp_ln879_1_fu_193_p2;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] empty_fu_153_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] add_ln158_fu_198_p2;
wire    ap_CS_fsm_state14;
wire    regslice_both_load_queue_V_V_U_apdone_blk;
wire    regslice_both_gemm_queue_V_V_U_apdone_blk;
wire    regslice_both_store_queue_V_V_U_apdone_blk;
reg    ap_block_state14;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    load_queue_V_V_TVALID_int;
wire    load_queue_V_V_TREADY_int;
wire    regslice_both_load_queue_V_V_U_vld_out;
reg    gemm_queue_V_V_TVALID_int;
wire    gemm_queue_V_V_TREADY_int;
wire    regslice_both_gemm_queue_V_V_U_vld_out;
reg    store_queue_V_V_TVALID_int;
wire    store_queue_V_V_TREADY_int;
wire    regslice_both_store_queue_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

fetch_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
fetch_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .insn_count(insn_count),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .insns_V(insns_V)
);

fetch_ins_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INS_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INS_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INS_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INS_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INS_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INS_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INS_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INS_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INS_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INS_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INS_PORT_CACHE_VALUE ))
fetch_ins_port_m_axi_U(
    .AWVALID(m_axi_ins_port_AWVALID),
    .AWREADY(m_axi_ins_port_AWREADY),
    .AWADDR(m_axi_ins_port_AWADDR),
    .AWID(m_axi_ins_port_AWID),
    .AWLEN(m_axi_ins_port_AWLEN),
    .AWSIZE(m_axi_ins_port_AWSIZE),
    .AWBURST(m_axi_ins_port_AWBURST),
    .AWLOCK(m_axi_ins_port_AWLOCK),
    .AWCACHE(m_axi_ins_port_AWCACHE),
    .AWPROT(m_axi_ins_port_AWPROT),
    .AWQOS(m_axi_ins_port_AWQOS),
    .AWREGION(m_axi_ins_port_AWREGION),
    .AWUSER(m_axi_ins_port_AWUSER),
    .WVALID(m_axi_ins_port_WVALID),
    .WREADY(m_axi_ins_port_WREADY),
    .WDATA(m_axi_ins_port_WDATA),
    .WSTRB(m_axi_ins_port_WSTRB),
    .WLAST(m_axi_ins_port_WLAST),
    .WID(m_axi_ins_port_WID),
    .WUSER(m_axi_ins_port_WUSER),
    .ARVALID(m_axi_ins_port_ARVALID),
    .ARREADY(m_axi_ins_port_ARREADY),
    .ARADDR(m_axi_ins_port_ARADDR),
    .ARID(m_axi_ins_port_ARID),
    .ARLEN(m_axi_ins_port_ARLEN),
    .ARSIZE(m_axi_ins_port_ARSIZE),
    .ARBURST(m_axi_ins_port_ARBURST),
    .ARLOCK(m_axi_ins_port_ARLOCK),
    .ARCACHE(m_axi_ins_port_ARCACHE),
    .ARPROT(m_axi_ins_port_ARPROT),
    .ARQOS(m_axi_ins_port_ARQOS),
    .ARREGION(m_axi_ins_port_ARREGION),
    .ARUSER(m_axi_ins_port_ARUSER),
    .RVALID(m_axi_ins_port_RVALID),
    .RREADY(m_axi_ins_port_RREADY),
    .RDATA(m_axi_ins_port_RDATA),
    .RLAST(m_axi_ins_port_RLAST),
    .RID(m_axi_ins_port_RID),
    .RUSER(m_axi_ins_port_RUSER),
    .RRESP(m_axi_ins_port_RRESP),
    .BVALID(m_axi_ins_port_BVALID),
    .BREADY(m_axi_ins_port_BREADY),
    .BRESP(m_axi_ins_port_BRESP),
    .BID(m_axi_ins_port_BID),
    .BUSER(m_axi_ins_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ins_port_ARVALID),
    .I_ARREADY(ins_port_ARREADY),
    .I_ARADDR(ins_port_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(insn_count_read_reg_211),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(ins_port_RVALID),
    .I_RREADY(ins_port_RREADY),
    .I_RDATA(ins_port_RDATA),
    .I_RID(ins_port_RID),
    .I_RUSER(ins_port_RUSER),
    .I_RRESP(ins_port_RRESP),
    .I_RLAST(ins_port_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ins_port_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ins_port_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(ins_port_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ins_port_BRESP),
    .I_BID(ins_port_BID),
    .I_BUSER(ins_port_BUSER)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_load_queue_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(raw_insn_reg_237_pp0_iter2_reg),
    .vld_in(load_queue_V_V_TVALID_int),
    .ack_in(load_queue_V_V_TREADY_int),
    .data_out(load_queue_V_V_TDATA),
    .vld_out(regslice_both_load_queue_V_V_U_vld_out),
    .ack_out(load_queue_V_V_TREADY),
    .apdone_blk(regslice_both_load_queue_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_gemm_queue_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(raw_insn_reg_237_pp0_iter2_reg),
    .vld_in(gemm_queue_V_V_TVALID_int),
    .ack_in(gemm_queue_V_V_TREADY_int),
    .data_out(gemm_queue_V_V_TDATA),
    .vld_out(regslice_both_gemm_queue_V_V_U_vld_out),
    .ack_out(gemm_queue_V_V_TREADY),
    .apdone_blk(regslice_both_gemm_queue_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_store_queue_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(raw_insn_reg_237_pp0_iter2_reg),
    .vld_in(store_queue_V_V_TVALID_int),
    .ack_in(store_queue_V_V_TREADY_int),
    .data_out(store_queue_V_V_TDATA),
    .vld_out(regslice_both_store_queue_V_V_U_vld_out),
    .ack_out(store_queue_V_V_TREADY),
    .apdone_blk(regslice_both_store_queue_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln145_fu_163_p2 == 1'd0))) begin
        pc_0_reg_132 <= pc_fu_168_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pc_0_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_188_p2 == 1'd0))) begin
        icmp_ln879_1_reg_259 <= icmp_ln879_1_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln879_1_reg_259_pp0_iter3_reg <= icmp_ln879_1_reg_259;
        icmp_ln879_reg_255 <= icmp_ln879_fu_188_p2;
        icmp_ln879_reg_255_pp0_iter3_reg <= icmp_ln879_reg_255;
        raw_insn_reg_237_pp0_iter2_reg <= raw_insn_reg_237;
        tmp_reg_263_pp0_iter3_reg <= tmp_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        insn_count_read_reg_211 <= insn_count;
        insns_V1_reg_217 <= {{insns_V[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        memory_type_V_reg_250 <= {{ins_port_RDATA[8:7]}};
        opcode_V_reg_244 <= opcode_V_fu_174_p1;
        raw_insn_reg_237 <= ins_port_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_193_p2 == 1'd1) & (icmp_ln879_fu_188_p2 == 1'd0))) begin
        tmp_reg_263 <= add_ln158_fu_198_p2[32'd1];
    end
end

always @ (*) begin
    if ((icmp_ln145_fu_163_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_store_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_gemm_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_load_queue_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_store_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_gemm_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_load_queue_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd0) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_reg_263_pp0_iter3_reg == 1'd1) & (icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd1) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_1_reg_259 == 1'd0) & (icmp_ln879_reg_255 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_263 == 1'd1) & (icmp_ln879_1_reg_259 == 1'd1) & (icmp_ln879_reg_255 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gemm_queue_V_V_TDATA_blk_n = gemm_queue_V_V_TREADY_int;
    end else begin
        gemm_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op57_write_state12 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op55_write_state12 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gemm_queue_V_V_TVALID_int = 1'b1;
    end else begin
        gemm_queue_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ins_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ins_port_ARVALID = 1'b1;
    end else begin
        ins_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ins_port_RREADY = 1'b1;
    end else begin
        ins_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ins_port_blk_n_AR = m_axi_ins_port_ARREADY;
    end else begin
        ins_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ins_port_blk_n_R = m_axi_ins_port_RVALID;
    end else begin
        ins_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd1) & (tmp_reg_263_pp0_iter3_reg == 1'd0) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_1_reg_259 == 1'd1) & (tmp_reg_263 == 1'd0) & (icmp_ln879_reg_255 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        load_queue_V_V_TDATA_blk_n = load_queue_V_V_TREADY_int;
    end else begin
        load_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op56_write_state12 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        load_queue_V_V_TVALID_int = 1'b1;
    end else begin
        load_queue_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_255 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        store_queue_V_V_TDATA_blk_n = store_queue_V_V_TREADY_int;
    end else begin
        store_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_255 == 1'd1))) begin
        store_queue_V_V_TVALID_int = 1'b1;
    end else begin
        store_queue_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ins_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln145_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln145_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((regslice_both_store_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_gemm_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_load_queue_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln158_fu_198_p2 = ($signed(memory_type_V_reg_250) + $signed(2'd3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ins_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ins_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ins_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (ins_port_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = (((gemm_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op57_write_state12 == 1'b1)) | ((load_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op56_write_state12 == 1'b1)) | ((gemm_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op55_write_state12 == 1'b1)) | ((store_queue_V_V_TREADY_int == 1'b0) & (icmp_ln879_reg_255 == 1'd1)));
end

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((gemm_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op66_write_state13 == 1'b1)) | ((load_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op64_write_state13 == 1'b1)) | ((gemm_queue_V_V_TREADY_int == 1'b0) & (ap_predicate_op62_write_state13 == 1'b1)) | ((store_queue_V_V_TREADY_int == 1'b0) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd1)));
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14 = ((regslice_both_store_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_gemm_queue_V_V_U_apdone_blk == 1'b1) | (regslice_both_load_queue_V_V_U_apdone_blk == 1'b1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op55_write_state12 = ((icmp_ln879_1_reg_259 == 1'd0) & (icmp_ln879_reg_255 == 1'd0));
end

always @ (*) begin
    ap_predicate_op56_write_state12 = ((icmp_ln879_1_reg_259 == 1'd1) & (tmp_reg_263 == 1'd0) & (icmp_ln879_reg_255 == 1'd0));
end

always @ (*) begin
    ap_predicate_op57_write_state12 = ((tmp_reg_263 == 1'd1) & (icmp_ln879_1_reg_259 == 1'd1) & (icmp_ln879_reg_255 == 1'd0));
end

always @ (*) begin
    ap_predicate_op62_write_state13 = ((icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd0) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op64_write_state13 = ((icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd1) & (tmp_reg_263_pp0_iter3_reg == 1'd0) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_write_state13 = ((tmp_reg_263_pp0_iter3_reg == 1'd1) & (icmp_ln879_1_reg_259_pp0_iter3_reg == 1'd1) & (icmp_ln879_reg_255_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_153_p1 = insns_V1_reg_217;

assign gemm_queue_V_V_TVALID = regslice_both_gemm_queue_V_V_U_vld_out;

assign icmp_ln145_fu_163_p2 = ((pc_0_reg_132 == insn_count_read_reg_211) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_193_p2 = ((opcode_V_reg_244 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_188_p2 = ((opcode_V_reg_244 == 3'd1) ? 1'b1 : 1'b0);

assign ins_port_ARADDR = empty_fu_153_p1;

assign load_queue_V_V_TVALID = regslice_both_load_queue_V_V_U_vld_out;

assign opcode_V_fu_174_p1 = ins_port_RDATA[2:0];

assign pc_fu_168_p2 = (pc_0_reg_132 + 32'd1);

assign store_queue_V_V_TVALID = regslice_both_store_queue_V_V_U_vld_out;

endmodule //fetch
