-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fetch is
generic (
    C_M_AXI_INS_PORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INS_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INS_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INS_PORT_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_INS_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INS_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INS_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INS_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INS_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_INS_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INS_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_ins_port_AWVALID : OUT STD_LOGIC;
    m_axi_ins_port_AWREADY : IN STD_LOGIC;
    m_axi_ins_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_ins_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ID_WIDTH-1 downto 0);
    m_axi_ins_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ins_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ins_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ins_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_ins_port_WVALID : OUT STD_LOGIC;
    m_axi_ins_port_WREADY : IN STD_LOGIC;
    m_axi_ins_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_DATA_WIDTH-1 downto 0);
    m_axi_ins_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_ins_port_WLAST : OUT STD_LOGIC;
    m_axi_ins_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ID_WIDTH-1 downto 0);
    m_axi_ins_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_ins_port_ARVALID : OUT STD_LOGIC;
    m_axi_ins_port_ARREADY : IN STD_LOGIC;
    m_axi_ins_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_ins_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ID_WIDTH-1 downto 0);
    m_axi_ins_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ins_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ins_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ins_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ins_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_ins_port_RVALID : IN STD_LOGIC;
    m_axi_ins_port_RREADY : OUT STD_LOGIC;
    m_axi_ins_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_DATA_WIDTH-1 downto 0);
    m_axi_ins_port_RLAST : IN STD_LOGIC;
    m_axi_ins_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ID_WIDTH-1 downto 0);
    m_axi_ins_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_ins_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_BVALID : IN STD_LOGIC;
    m_axi_ins_port_BREADY : OUT STD_LOGIC;
    m_axi_ins_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ins_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_ID_WIDTH-1 downto 0);
    m_axi_ins_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INS_PORT_BUSER_WIDTH-1 downto 0);
    load_queue_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    load_queue_V_V_TVALID : OUT STD_LOGIC;
    load_queue_V_V_TREADY : IN STD_LOGIC;
    gemm_queue_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    gemm_queue_V_V_TVALID : OUT STD_LOGIC;
    gemm_queue_V_V_TREADY : IN STD_LOGIC;
    store_queue_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    store_queue_V_V_TVALID : OUT STD_LOGIC;
    store_queue_V_V_TREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fetch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fetch,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=972,HLS_SYN_LUT=1189,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal insn_count : STD_LOGIC_VECTOR (31 downto 0);
    signal insns_V : STD_LOGIC_VECTOR (31 downto 0);
    signal ins_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ins_port_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal load_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln879_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_263 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln879_reg_255_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_259_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_263_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gemm_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal store_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal ins_port_AWREADY : STD_LOGIC;
    signal ins_port_WREADY : STD_LOGIC;
    signal ins_port_ARVALID : STD_LOGIC;
    signal ins_port_ARREADY : STD_LOGIC;
    signal ins_port_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ins_port_RVALID : STD_LOGIC;
    signal ins_port_RREADY : STD_LOGIC;
    signal ins_port_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ins_port_RLAST : STD_LOGIC;
    signal ins_port_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ins_port_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ins_port_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ins_port_BVALID : STD_LOGIC;
    signal ins_port_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ins_port_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ins_port_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pc_0_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal insn_count_read_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal insns_V1_reg_217 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln145_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op55_write_state12 : BOOLEAN;
    signal ap_predicate_op56_write_state12 : BOOLEAN;
    signal ap_predicate_op57_write_state12 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_predicate_op62_write_state13 : BOOLEAN;
    signal ap_predicate_op64_write_state13 : BOOLEAN;
    signal ap_predicate_op66_write_state13 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pc_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal raw_insn_reg_237 : STD_LOGIC_VECTOR (127 downto 0);
    signal raw_insn_reg_237_pp0_iter2_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal opcode_V_fu_174_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal opcode_V_reg_244 : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_type_V_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln879_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal empty_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln158_fu_198_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal regslice_both_load_queue_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_gemm_queue_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_store_queue_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state14 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal load_queue_V_V_TVALID_int : STD_LOGIC;
    signal load_queue_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_load_queue_V_V_U_vld_out : STD_LOGIC;
    signal gemm_queue_V_V_TVALID_int : STD_LOGIC;
    signal gemm_queue_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_gemm_queue_V_V_U_vld_out : STD_LOGIC;
    signal store_queue_V_V_TVALID_int : STD_LOGIC;
    signal store_queue_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_store_queue_V_V_U_vld_out : STD_LOGIC;

    component fetch_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        insn_count : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        insns_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fetch_ins_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fetch_CONTROL_BUS_s_axi_U : component fetch_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        insn_count => insn_count,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        insns_V => insns_V);

    fetch_ins_port_m_axi_U : component fetch_ins_port_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INS_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INS_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INS_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INS_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INS_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INS_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INS_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INS_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INS_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INS_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INS_PORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ins_port_AWVALID,
        AWREADY => m_axi_ins_port_AWREADY,
        AWADDR => m_axi_ins_port_AWADDR,
        AWID => m_axi_ins_port_AWID,
        AWLEN => m_axi_ins_port_AWLEN,
        AWSIZE => m_axi_ins_port_AWSIZE,
        AWBURST => m_axi_ins_port_AWBURST,
        AWLOCK => m_axi_ins_port_AWLOCK,
        AWCACHE => m_axi_ins_port_AWCACHE,
        AWPROT => m_axi_ins_port_AWPROT,
        AWQOS => m_axi_ins_port_AWQOS,
        AWREGION => m_axi_ins_port_AWREGION,
        AWUSER => m_axi_ins_port_AWUSER,
        WVALID => m_axi_ins_port_WVALID,
        WREADY => m_axi_ins_port_WREADY,
        WDATA => m_axi_ins_port_WDATA,
        WSTRB => m_axi_ins_port_WSTRB,
        WLAST => m_axi_ins_port_WLAST,
        WID => m_axi_ins_port_WID,
        WUSER => m_axi_ins_port_WUSER,
        ARVALID => m_axi_ins_port_ARVALID,
        ARREADY => m_axi_ins_port_ARREADY,
        ARADDR => m_axi_ins_port_ARADDR,
        ARID => m_axi_ins_port_ARID,
        ARLEN => m_axi_ins_port_ARLEN,
        ARSIZE => m_axi_ins_port_ARSIZE,
        ARBURST => m_axi_ins_port_ARBURST,
        ARLOCK => m_axi_ins_port_ARLOCK,
        ARCACHE => m_axi_ins_port_ARCACHE,
        ARPROT => m_axi_ins_port_ARPROT,
        ARQOS => m_axi_ins_port_ARQOS,
        ARREGION => m_axi_ins_port_ARREGION,
        ARUSER => m_axi_ins_port_ARUSER,
        RVALID => m_axi_ins_port_RVALID,
        RREADY => m_axi_ins_port_RREADY,
        RDATA => m_axi_ins_port_RDATA,
        RLAST => m_axi_ins_port_RLAST,
        RID => m_axi_ins_port_RID,
        RUSER => m_axi_ins_port_RUSER,
        RRESP => m_axi_ins_port_RRESP,
        BVALID => m_axi_ins_port_BVALID,
        BREADY => m_axi_ins_port_BREADY,
        BRESP => m_axi_ins_port_BRESP,
        BID => m_axi_ins_port_BID,
        BUSER => m_axi_ins_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ins_port_ARVALID,
        I_ARREADY => ins_port_ARREADY,
        I_ARADDR => ins_port_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => insn_count_read_reg_211,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => ins_port_RVALID,
        I_RREADY => ins_port_RREADY,
        I_RDATA => ins_port_RDATA,
        I_RID => ins_port_RID,
        I_RUSER => ins_port_RUSER,
        I_RRESP => ins_port_RRESP,
        I_RLAST => ins_port_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ins_port_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ins_port_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ins_port_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ins_port_BRESP,
        I_BID => ins_port_BID,
        I_BUSER => ins_port_BUSER);

    regslice_both_load_queue_V_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => raw_insn_reg_237_pp0_iter2_reg,
        vld_in => load_queue_V_V_TVALID_int,
        ack_in => load_queue_V_V_TREADY_int,
        data_out => load_queue_V_V_TDATA,
        vld_out => regslice_both_load_queue_V_V_U_vld_out,
        ack_out => load_queue_V_V_TREADY,
        apdone_blk => regslice_both_load_queue_V_V_U_apdone_blk);

    regslice_both_gemm_queue_V_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => raw_insn_reg_237_pp0_iter2_reg,
        vld_in => gemm_queue_V_V_TVALID_int,
        ack_in => gemm_queue_V_V_TREADY_int,
        data_out => gemm_queue_V_V_TDATA,
        vld_out => regslice_both_gemm_queue_V_V_U_vld_out,
        ack_out => gemm_queue_V_V_TREADY,
        apdone_blk => regslice_both_gemm_queue_V_V_U_apdone_blk);

    regslice_both_store_queue_V_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => raw_insn_reg_237_pp0_iter2_reg,
        vld_in => store_queue_V_V_TVALID_int,
        ack_in => store_queue_V_V_TREADY_int,
        data_out => store_queue_V_V_TDATA,
        vld_out => regslice_both_store_queue_V_V_U_vld_out,
        ack_out => store_queue_V_V_TREADY,
        apdone_blk => regslice_both_store_queue_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pc_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln145_fu_163_p2 = ap_const_lv1_0))) then 
                pc_0_reg_132 <= pc_fu_168_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                pc_0_reg_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_fu_188_p2 = ap_const_lv1_0))) then
                icmp_ln879_1_reg_259 <= icmp_ln879_1_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln879_1_reg_259_pp0_iter3_reg <= icmp_ln879_1_reg_259;
                icmp_ln879_reg_255 <= icmp_ln879_fu_188_p2;
                icmp_ln879_reg_255_pp0_iter3_reg <= icmp_ln879_reg_255;
                raw_insn_reg_237_pp0_iter2_reg <= raw_insn_reg_237;
                tmp_reg_263_pp0_iter3_reg <= tmp_reg_263;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                insn_count_read_reg_211 <= insn_count;
                insns_V1_reg_217 <= insns_V(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                memory_type_V_reg_250 <= ins_port_RDATA(8 downto 7);
                opcode_V_reg_244 <= opcode_V_fu_174_p1;
                raw_insn_reg_237 <= ins_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_fu_193_p2 = ap_const_lv1_1) and (icmp_ln879_fu_188_p2 = ap_const_lv1_0))) then
                tmp_reg_263 <= add_ln158_fu_198_p2(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ins_port_ARREADY, icmp_ln145_fu_163_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state14, regslice_both_load_queue_V_V_U_apdone_blk, regslice_both_gemm_queue_V_V_U_apdone_blk, regslice_both_store_queue_V_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ins_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln145_fu_163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln145_fu_163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((regslice_both_store_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_gemm_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_load_queue_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln158_fu_198_p2 <= std_logic_vector(unsigned(memory_type_V_reg_250) + unsigned(ap_const_lv2_3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ins_port_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ins_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ins_port_RVALID, ap_block_state12_io, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ins_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ins_port_RVALID, ap_block_state12_io, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ins_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(ins_port_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (ins_port_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(icmp_ln879_reg_255, ap_predicate_op55_write_state12, ap_predicate_op56_write_state12, ap_predicate_op57_write_state12, load_queue_V_V_TREADY_int, gemm_queue_V_V_TREADY_int, store_queue_V_V_TREADY_int)
    begin
                ap_block_state12_io <= (((gemm_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op57_write_state12 = ap_const_boolean_1)) or ((load_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op56_write_state12 = ap_const_boolean_1)) or ((gemm_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op55_write_state12 = ap_const_boolean_1)) or ((store_queue_V_V_TREADY_int = ap_const_logic_0) and (icmp_ln879_reg_255 = ap_const_lv1_1)));
    end process;

        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(icmp_ln879_reg_255_pp0_iter3_reg, ap_predicate_op62_write_state13, ap_predicate_op64_write_state13, ap_predicate_op66_write_state13, load_queue_V_V_TREADY_int, gemm_queue_V_V_TREADY_int, store_queue_V_V_TREADY_int)
    begin
                ap_block_state13_io <= (((gemm_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op66_write_state13 = ap_const_boolean_1)) or ((load_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op64_write_state13 = ap_const_boolean_1)) or ((gemm_queue_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op62_write_state13 = ap_const_boolean_1)) or ((store_queue_V_V_TREADY_int = ap_const_logic_0) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_1)));
    end process;

        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_assign_proc : process(regslice_both_load_queue_V_V_U_apdone_blk, regslice_both_gemm_queue_V_V_U_apdone_blk, regslice_both_store_queue_V_V_U_apdone_blk)
    begin
                ap_block_state14 <= ((regslice_both_store_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_gemm_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_load_queue_V_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln145_fu_163_p2)
    begin
        if ((icmp_ln145_fu_163_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14, regslice_both_load_queue_V_V_U_apdone_blk, regslice_both_gemm_queue_V_V_U_apdone_blk, regslice_both_store_queue_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_store_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_gemm_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_load_queue_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op55_write_state12_assign_proc : process(icmp_ln879_reg_255, icmp_ln879_1_reg_259)
    begin
                ap_predicate_op55_write_state12 <= ((icmp_ln879_1_reg_259 = ap_const_lv1_0) and (icmp_ln879_reg_255 = ap_const_lv1_0));
    end process;


    ap_predicate_op56_write_state12_assign_proc : process(icmp_ln879_reg_255, icmp_ln879_1_reg_259, tmp_reg_263)
    begin
                ap_predicate_op56_write_state12 <= ((icmp_ln879_1_reg_259 = ap_const_lv1_1) and (tmp_reg_263 = ap_const_lv1_0) and (icmp_ln879_reg_255 = ap_const_lv1_0));
    end process;


    ap_predicate_op57_write_state12_assign_proc : process(icmp_ln879_reg_255, icmp_ln879_1_reg_259, tmp_reg_263)
    begin
                ap_predicate_op57_write_state12 <= ((tmp_reg_263 = ap_const_lv1_1) and (icmp_ln879_1_reg_259 = ap_const_lv1_1) and (icmp_ln879_reg_255 = ap_const_lv1_0));
    end process;


    ap_predicate_op62_write_state13_assign_proc : process(icmp_ln879_reg_255_pp0_iter3_reg, icmp_ln879_1_reg_259_pp0_iter3_reg)
    begin
                ap_predicate_op62_write_state13 <= ((icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op64_write_state13_assign_proc : process(icmp_ln879_reg_255_pp0_iter3_reg, icmp_ln879_1_reg_259_pp0_iter3_reg, tmp_reg_263_pp0_iter3_reg)
    begin
                ap_predicate_op64_write_state13 <= ((icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_263_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op66_write_state13_assign_proc : process(icmp_ln879_reg_255_pp0_iter3_reg, icmp_ln879_1_reg_259_pp0_iter3_reg, tmp_reg_263_pp0_iter3_reg)
    begin
                ap_predicate_op66_write_state13 <= ((tmp_reg_263_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, regslice_both_load_queue_V_V_U_apdone_blk, regslice_both_gemm_queue_V_V_U_apdone_blk, regslice_both_store_queue_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_store_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_gemm_queue_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_load_queue_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(insns_V1_reg_217),64));

    gemm_queue_V_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln879_reg_255, icmp_ln879_1_reg_259, tmp_reg_263, ap_enable_reg_pp0_iter4, icmp_ln879_reg_255_pp0_iter3_reg, icmp_ln879_1_reg_259_pp0_iter3_reg, tmp_reg_263_pp0_iter3_reg, gemm_queue_V_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_263_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln879_1_reg_259 = ap_const_lv1_0) and (icmp_ln879_reg_255 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_263 = ap_const_lv1_1) and (icmp_ln879_1_reg_259 = ap_const_lv1_1) and (icmp_ln879_reg_255 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gemm_queue_V_V_TDATA_blk_n <= gemm_queue_V_V_TREADY_int;
        else 
            gemm_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gemm_queue_V_V_TVALID <= regslice_both_gemm_queue_V_V_U_vld_out;

    gemm_queue_V_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op55_write_state12, ap_predicate_op57_write_state12, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op57_write_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op55_write_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gemm_queue_V_V_TVALID_int <= ap_const_logic_1;
        else 
            gemm_queue_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln145_fu_163_p2 <= "1" when (pc_0_reg_132 = insn_count_read_reg_211) else "0";
    icmp_ln879_1_fu_193_p2 <= "1" when (opcode_V_reg_244 = ap_const_lv3_0) else "0";
    icmp_ln879_fu_188_p2 <= "1" when (opcode_V_reg_244 = ap_const_lv3_1) else "0";
    ins_port_ARADDR <= empty_fu_153_p1(32 - 1 downto 0);

    ins_port_ARVALID_assign_proc : process(ap_CS_fsm_state2, ins_port_ARREADY)
    begin
        if (((ins_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ins_port_ARVALID <= ap_const_logic_1;
        else 
            ins_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ins_port_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ins_port_RREADY <= ap_const_logic_1;
        else 
            ins_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    ins_port_blk_n_AR_assign_proc : process(m_axi_ins_port_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ins_port_blk_n_AR <= m_axi_ins_port_ARREADY;
        else 
            ins_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    ins_port_blk_n_R_assign_proc : process(m_axi_ins_port_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ins_port_blk_n_R <= m_axi_ins_port_RVALID;
        else 
            ins_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    load_queue_V_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln879_reg_255, icmp_ln879_1_reg_259, tmp_reg_263, ap_enable_reg_pp0_iter4, icmp_ln879_reg_255_pp0_iter3_reg, icmp_ln879_1_reg_259_pp0_iter3_reg, tmp_reg_263_pp0_iter3_reg, load_queue_V_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln879_1_reg_259_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_263_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln879_1_reg_259 = ap_const_lv1_1) and (tmp_reg_263 = ap_const_lv1_0) and (icmp_ln879_reg_255 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            load_queue_V_V_TDATA_blk_n <= load_queue_V_V_TREADY_int;
        else 
            load_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    load_queue_V_V_TVALID <= regslice_both_load_queue_V_V_U_vld_out;

    load_queue_V_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op56_write_state12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op56_write_state12 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            load_queue_V_V_TVALID_int <= ap_const_logic_1;
        else 
            load_queue_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    opcode_V_fu_174_p1 <= ins_port_RDATA(3 - 1 downto 0);
    pc_fu_168_p2 <= std_logic_vector(unsigned(pc_0_reg_132) + unsigned(ap_const_lv32_1));

    store_queue_V_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln879_reg_255, ap_enable_reg_pp0_iter4, icmp_ln879_reg_255_pp0_iter3_reg, store_queue_V_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln879_reg_255_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln879_reg_255 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            store_queue_V_V_TDATA_blk_n <= store_queue_V_V_TREADY_int;
        else 
            store_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    store_queue_V_V_TVALID <= regslice_both_store_queue_V_V_U_vld_out;

    store_queue_V_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln879_reg_255, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln879_reg_255 = ap_const_lv1_1))) then 
            store_queue_V_V_TVALID_int <= ap_const_logic_1;
        else 
            store_queue_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
